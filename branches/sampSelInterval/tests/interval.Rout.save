
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "sampleSelection" )
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library( "mvtnorm" )
> options( digits = 2 )
> 
> nObs <- 300
> betaS <- c( 1, 1, -1 )
> betaO <- c( 10, 4 )
> rho <- 0.4
> sigma2 <- 5
> bound <- c(-Inf,5,15,Inf)
> 
> 
> set.seed(123)
> dat <- data.frame( x1 = rnorm( nObs ), x2 = rnorm( nObs ) )
> Sigma <- matrix( c( 1, rho*sigma2, rho*sigma2, sigma2^2 ), nrow = 2 )
> eps <- rmvnorm( nObs, sigma = Sigma )
> dat$epsS <- eps[,1]
> dat$epsO <- eps[,2]
> dat$yS <- with( dat, betaS[1] + betaS[2] * x1 + betaS[3] * x2 + epsS ) > 0
> # table(dat$yS)
> dat$yOu <- with( dat, betaO[1] + betaO[2] * x1 + epsO )
> dat$yOu[ !dat$yS ] <- NA
> hist( dat$yOu )
> dat$yO <- cut( dat$yOu, bound )
> 
> YS <- dat$yS
> XS <- cbind( 1, dat$x1, dat$x2 )
> YO <- as.numeric( dat$yO )
> XO <- cbind( 1, dat$x1 )
> 
> start <- c( betaS, betaO, rho, sigma2 )
> 
> res <- sampleSelection:::intervalfit( YS, XS, YO, XO, boundaries = bound, 
+     AnalyticGrad = FALSE, start = start, printLevel = 1 )
YO observed: 209 times; not observed: 91 times:
Number of intervals:  3 
       YO
YS        1   2   3 <NA>
  FALSE   0   0   0   91
  TRUE   26 130  53    0
  <NA>    0   0   0    0
Boundaries:
[1] -Inf    5   15  Inf
Initial values:
[1]  1.0  1.0 -1.0 10.0  4.0  0.4  5.0
--------------
successive function values within tolerance limit 
14  iterations
estimate: 0.98 0.97 -1.3 10 2.7 0.29 26 
Function value: -275 
> 
> print( res )

Call:
 NULL 

Coefficients:
[1]   0.982   0.967  -1.286  10.241   2.659   0.289  26.088

> print( round( coef( res ), 2 ) )
[1]   0.98   0.97  -1.29  10.24   2.66   0.29  26.09
> print( round( coef( summary( res ) ), 2 ) )
     Estimate Std. error t value Pr(> t)
[1,]     0.98       0.11    9.05    0.00
[2,]     0.97       0.15    6.48    0.00
[3,]    -1.29       0.12  -10.63    0.00
[4,]    10.24       0.67   15.33    0.00
[5,]     2.66       0.59    4.49    0.00
[6,]     0.29       0.33    0.87    0.38
[7,]    26.09       3.90    6.69    0.00
> maxLik:::summary.maxLik( res )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 14 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -275 
7  free parameters
Estimates:
     Estimate Std. error t value Pr(> t)    
[1,]    0.982      0.109    9.05 < 2e-16 ***
[2,]    0.967      0.149    6.48 8.9e-11 ***
[3,]   -1.286      0.121  -10.63 < 2e-16 ***
[4,]   10.241      0.668   15.33 < 2e-16 ***
[5,]    2.659      0.592    4.49 7.1e-06 ***
[6,]    0.289      0.332    0.87    0.38    
[7,]   26.088      3.899    6.69 2.2e-11 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> proc.time()
   user  system elapsed 
  38.12    0.24   38.36 
