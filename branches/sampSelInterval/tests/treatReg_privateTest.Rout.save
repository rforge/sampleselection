
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### Testing treatreg.
> ### These are tests that are not supposed to be included in CRAN
> 
> DGP <- function(N=1000, sigma=1, rho=0.8,
+                 alpha0=-1, alpha1=1, alpha2=1,
+                 beta0=0, beta1=1, beta2=1) {
+    ## Generate random data
+    library(mvtnorm)
+    Sigma <- matrix(c(1, rho*sigma, rho*sigma, sigma^2), 2, 2)
+    uv <- rmvnorm(N, mean=c(0,0), sigma=Sigma)
+    u <- uv[,1]
+    v <- uv[,2]
+    x <- rnorm(N)
+    z <- rnorm(N)
+    ySX <- alpha0 + alpha1*x + alpha2*z + u
+    yS <- ySX > 0
+    yO <- beta0 + beta1*x + beta2*yS + v
+    data.frame(yO, yS, x, z, ySX, u, v)
+ }
> 
> library(sampleSelection2)
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> set.seed(1)
> options(digits=3)
> cat("NA, Inf in data.  Should show 93 observations\n")
NA, Inf in data.  Should show 93 observations
> dat <- DGP(100)
> dat$yO[1] <- NA
> dat$yO[2] <- Inf
> dat$yS[3] <- NA
> dat$x[5] <- NA
> dat$x[6] <- Inf
> dat$z[7] <- NA
> dat$z[8] <- Inf
> m <- treatReg(yS~x+z, yO~yS+x, data=dat)
> print(summary(m))
--------------------------------------------
Tobit treatment model (switching regression model)
Maximum Likelihood estimation
Newton-Raphson maximisation, 4 iterations
Return code 1: gradient close to zero
Log-Likelihood: -149 
93 observations: 70 non-participants (selection FALSE) and 23 participants (selection TRUE)

8 free parameters (df = 85)
Probit selection equation:
            Estimate Std. error t value Pr(> t)    
(Intercept)   -1.083      0.193   -5.61   2e-08 ***
x              0.656      0.196    3.35   8e-04 ***
z              0.950      0.206    4.61   4e-06 ***
Outcome equation:
            Estimate Std. error t value Pr(> t)    
(Intercept)   0.0672     0.1286    0.52  0.6015    
ySTRUE        0.8850     0.3324    2.66  0.0077 ** 
x             1.0095     0.1103    9.15  <2e-16 ***
   Error terms:
      Estimate Std. error t value Pr(> t)    
sigma   0.9455     0.0888   10.65 < 2e-16 ***
rho     0.7763     0.1388    5.59 2.2e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> mf <- model.frame(m)
> print(mf[sample(nrow(mf), 10),])
      yS       x       z     yO
87 FALSE -0.6682 -2.1294 -0.533
11  TRUE -0.1644  1.0436  1.946
96 FALSE  0.1344 -0.9243  0.415
75 FALSE  0.1560 -1.1677 -1.887
32 FALSE -2.8889 -1.5691 -2.555
67 FALSE -0.4222  0.6783 -1.543
38 FALSE -1.1865  0.0044 -1.486
89 FALSE  0.4337 -1.9050  2.642
36 FALSE -0.0982  0.7328 -0.521
10  TRUE  0.5101  0.3230  2.409
> mm <- model.matrix(m)
> print(mm[sample(nrow(mm), 10),])
    (Intercept) ySTRUE        x
40            1      0 -0.00534
43            1      1  0.22348
100           1      0 -0.30582
94            1      0 -1.42626
42            1      0  1.03411
56            1      0  1.14623
88            1      0  0.94518
86            1      1 -1.00107
28            1      0 -1.60551
68            1      0 -1.18911
> mm <- model.matrix(m, part="selection")
> print(mm[sample(nrow(mm), 10),])
   (Intercept)        x      z
40           1 -0.00534 -0.530
58           1  0.57274 -0.156
75           1  0.15601 -1.168
81           1  0.39813  0.763
85           1 -0.58061  1.155
11           1 -0.16438  1.044
27           1 -0.33113 -0.353
39           1  1.09678 -0.352
33           1 -0.64048 -0.367
69           1 -0.33103 -0.573
> 
> ## Now test prediction
> cat("predicted and actual selection values\n")
predicted and actual selection values
> pl <- predict(m, part="selection", type="link")
> pr <- predict(m, part="selection", type="response")
> p <- cbind(pred.link=pl, "P[ys=1]"=pr, actual.resp=mf$yS)
> print(p[sample(nrow(p), 10),])
   pred.link P[ys=1] actual.resp
73   -2.4234 0.00769           0
91   -0.0805 0.46790           0
84   -1.3864 0.08281           0
78   -0.7356 0.23099           0
43   -0.7024 0.24123           1
58   -0.8552 0.19622           0
14   -2.6043 0.00460           0
83   -1.0918 0.13746           0
89   -2.6085 0.00455           0
50    1.3797 0.91616           1
> cat("predicted and actual outcomes\n")
predicted and actual outcomes
> pu <- predict(m, part="outcome", type="unconditional")
> pc <- predict(m, part="outcome", type="conditional")
> p <- cbind("E[yo]"=pu, pc, "yo"=mf$yO, "ys"=mf$yS)
> print(p[sample(nrow(p), 10),])
    E[yo] E[yo|ys=0] E[yo|ys=1]     yo ys
93  1.199     0.5585      1.732  1.335  1
20  0.907     0.5850      1.822  2.130  1
29  0.266     0.2032      1.863 -0.901  0
52  0.478    -0.0293      1.147  0.141  0
50  1.982     0.6340      2.106  1.049  1
46 -1.952    -1.9522      0.963 -1.162  0
11  0.786     0.2903      1.468  1.946  1
63 -0.220    -0.2721      1.440  0.308  0
68 -1.133    -1.2678      0.180 -2.426  0
37  1.518     0.8440      2.021  0.998  1
> 
> 
> proc.time()
   user  system elapsed 
  1.820   0.044   1.861 
