
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( sampleSelection )
Loading required package: maxLik
Loading required package: miscTools
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det

Loading required package: car
Loading required package: MASS
Loading required package: nnet
Loading required package: survival
Loading required package: splines

Attaching package: 'car'

The following object(s) are masked from 'package:miscTools':

    coefTable

Loading required package: lmtest
Loading required package: zoo
> library( plm )
Loading required package: kinship
Loading required package: nlme
[1] "kinship is loaded"
Loading required package: Formula
Loading required package: sandwich
> 
> nId <- 100
> nTime <- 3
> 
> set.seed( 123 )
> pData <- data.frame(
+    id = rep( paste( "F", 1:nId, sep = "_" ), each = nTime ),
+    time = rep( 1980 + 1:nTime, nId ) )
> pData$ui <- rep( rnorm( nId ), each = nTime )
> pData$x1 <- rnorm( nId * nTime )
> pData$x2 <- runif( nId * nTime )
> pData$ys <- -1 + pData$ui + 2 * pData$x1 + 3 * pData$x2 + rnorm( nId * nTime )
> pData$y <- ifelse( pData$ys > 0, pData$ys, 0 )
> pData <- pdata.frame( pData, c( "id", "time" ) )
> 
> 
> # ## Newton-Raphson method
> # system.time( randEff <- tobit( y ~ x1 + x2, data = pData ) )
> # summary( randEff )
> 
> ## BHHH method
> system.time( randEffBhhh <- tobit( y ~ x1 + x2, data = pData,
+    method = "BHHH" ) )
   user  system elapsed 
 63.464   0.044  63.936 
> summary( randEffBhhh )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 24 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -331.5721 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -1.063672   0.231447 -4.5957 4.312e-06 ***
x1           2.077633   0.095221 21.8191 < 2.2e-16 ***
x2           3.053359   0.373044  8.1850 2.723e-16 ***
logSigmaMu  -0.205500   0.139165 -1.4767    0.1398    
logSigmaNu   0.051726   0.067912  0.7617    0.4463    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## BFGS method (optim)
> system.time( randEffBfgs <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGS" ) )
   user  system elapsed 
 49.175   0.048  50.244 
> summary( randEffBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 42 iterations
Return code 0: successful convergence 
Log-Likelihood: -331.5721 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -1.063466   0.231838 -4.5871 4.494e-06 ***
x1           2.077659   0.098805 21.0279 < 2.2e-16 ***
x2           3.053009   0.332036  9.1948 < 2.2e-16 ***
logSigmaMu  -0.205557   0.115866 -1.7741   0.07605 .  
logSigmaNu   0.051730   0.068179  0.7587   0.44801    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## BFGS method (R)
> system.time( randEffBfgsr <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGSR" ) )
   user  system elapsed 
 47.483   0.100  49.051 
> summary( randEffBfgsr )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 14 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -331.5721 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -1.063682   0.231113 -4.6024 4.176e-06 ***
x1           2.077635   0.098851 21.0179 < 2.2e-16 ***
x2           3.053382   0.330477  9.2393 < 2.2e-16 ***
logSigmaMu  -0.205490   0.115844 -1.7739   0.07609 .  
logSigmaNu   0.051725   0.068173  0.7587   0.44801    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
