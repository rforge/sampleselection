
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( sampleSelection )
Loading required package: maxLik
Loading required package: miscTools
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det

Loading required package: car
Loading required package: MASS
Loading required package: nnet
Loading required package: survival
Loading required package: splines

Attaching package: 'car'

The following object(s) are masked from 'package:miscTools':

    coefTable

Loading required package: lmtest
Loading required package: zoo
> library( plm )
Loading required package: kinship
Loading required package: nlme
[1] "kinship is loaded"
Loading required package: Formula
Loading required package: sandwich
> 
> nId <- 15
> nTime <- 4
> 
> set.seed( 123 )
> pData <- data.frame(
+    id = rep( paste( "F", 1:nId, sep = "_" ), each = nTime ),
+    time = rep( 1980 + 1:nTime, nId ) )
> pData$ui <- rep( rnorm( nId ), each = nTime )
> pData$x1 <- rnorm( nId * nTime )
> pData$x2 <- runif( nId * nTime )
> pData$ys <- -1 + pData$ui + 2 * pData$x1 + 3 * pData$x2 + rnorm( nId * nTime )
> pData$y <- ifelse( pData$ys > 0, pData$ys, 0 )
> nData <- pData # save data set without information on panel structure
> pData <- pdata.frame( pData, c( "id", "time" ) )
> 
> 
> ## Newton-Raphson method
> system.time( randEff <- tobit( y ~ x1 + x2, data = pData ) )
   user  system elapsed 
  1.172   0.000   1.178 
> summary( randEff )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286086   0.465107 -0.6151  0.538491    
x1           1.668141   0.216370  7.7097 1.262e-14 ***
x2           2.162101   0.696486  3.1043  0.001907 ** 
logSigmaMu  -0.271720   0.245652 -1.1061  0.268677    
logSigmaNu   0.021602   0.131465  0.1643  0.869479    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
> ## BHHH method
> system.time( randEffBhhh <- tobit( y ~ x1 + x2, data = pData,
+    method = "BHHH" ) )
   user  system elapsed 
  0.728   0.012   0.743 
> summary( randEffBhhh )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 17 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.285998   0.489733 -0.5840  0.559229    
x1           1.668070   0.301259  5.5370 3.077e-08 ***
x2           2.162093   0.701235  3.0833  0.002047 ** 
logSigmaMu  -0.271676   0.290968 -0.9337  0.350459    
logSigmaNu   0.021567   0.135004  0.1597  0.873078    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
> ## BFGS method (optim)
> system.time( randEffBfgs <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGS" ) )
   user  system elapsed 
  0.544   0.004   0.548 
> summary( randEffBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 33 iterations
Return code 0: successful convergence 
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286085   0.465750 -0.6142  0.539052    
x1           1.668140   0.216339  7.7108 1.250e-14 ***
x2           2.162101   0.697098  3.1016  0.001925 ** 
logSigmaMu  -0.271720   0.245636 -1.1062  0.268645    
logSigmaNu   0.021602   0.131451  0.1643  0.869470    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
> ## BFGS method (R)
> system.time( randEffBfgsr <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.492   0.000   0.505 
> summary( randEffBfgsr )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286084   0.464024 -0.6165  0.537546    
x1           1.668139   0.216282  7.7128 1.231e-14 ***
x2           2.162099   0.693420  3.1180  0.001821 ** 
logSigmaMu  -0.271721   0.245603 -1.1063  0.268579    
logSigmaNu   0.021602   0.131451  0.1643  0.869466    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
> ## re-order observations/individuals
> set.seed( 234 )
> perm <- sample( nId )
> nData2 <- nData
> nData2$id <- NA
> for( i in 1:nId ) {
+    nData2$id[ nData$id == paste( "F", i, sep = "_" ) ] <-
+       paste( "G", perm[ i ], sep = "_" )
+ }
> pData2 <- pdata.frame( nData2, c( "id", "time" ) )
> system.time( randEffBfgsr2 <- tobit( y ~ x1 + x2, data = pData2,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.472   0.000   0.481 
> all.equal( randEffBfgsr2[ -11 ], randEffBfgsr[ -11 ] )
[1] "Component 3: Mean relative difference: 0.0001304908"
[2] "Component 4: Mean relative difference: 0.003106662" 
> all.equal( sort( randEffBfgsr2[[ 11 ]] ), sort( randEffBfgsr[[ 11 ]] ) )
[1] TRUE
> 
> 
> ## unbalanced panel data
> nDataUnb <- nData[ -c( 2, 5, 6, 8 ), ]
> pDataUnb <- pdata.frame( nDataUnb, c( "id", "time" ) )
> system.time( randEffBfgsrUnb <- tobit( y ~ x1 + x2, data = pDataUnb,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.484   0.000   0.494 
> summary( randEffBfgsrUnb )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -71.64188 
5  free parameters
Estimates:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -0.14649    0.46308 -0.3163 0.751748    
x1           1.63291    0.21835  7.4783 7.53e-14 ***
x2           2.04155    0.70250  2.9061 0.003659 ** 
logSigmaMu  -0.30669    0.25601 -1.1980 0.230926    
logSigmaNu   0.02966    0.13441  0.2207 0.825357    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
