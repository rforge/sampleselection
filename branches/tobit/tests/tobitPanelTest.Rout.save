
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( sampleSelection )
Loading required package: maxLik
Loading required package: miscTools
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det

Loading required package: car
Loading required package: MASS
Loading required package: nnet
Loading required package: survival
Loading required package: splines

Attaching package: 'car'

The following object(s) are masked from 'package:miscTools':

    coefTable

Loading required package: lmtest
Loading required package: zoo
> library( plm )
Loading required package: kinship
Loading required package: nlme
[1] "kinship is loaded"
Loading required package: Formula
Loading required package: sandwich
> 
> nId <- 15
> nTime <- 4
> 
> set.seed( 123 )
> pData <- data.frame(
+    id = rep( paste( "F", 1:nId, sep = "_" ), each = nTime ),
+    time = rep( 1980 + 1:nTime, nId ) )
> pData$ui <- rep( rnorm( nId ), each = nTime )
> pData$x1 <- rnorm( nId * nTime )
> pData$x2 <- runif( nId * nTime )
> pData$ys <- -1 + pData$ui + 2 * pData$x1 + 3 * pData$x2 + rnorm( nId * nTime )
> pData$y <- ifelse( pData$ys > 0, pData$ys, 0 )
> nData <- pData # save data set without information on panel structure
> pData <- pdata.frame( pData, c( "id", "time" ) )
> 
> 
> ## Newton-Raphson method
> system.time( randEff <- tobit( y ~ x1 + x2, data = pData ) )
   user  system elapsed 
  0.516   0.008   0.522 
> summary( randEff )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286086   0.464842 -0.6154  0.538259    
x1           1.668141   0.216208  7.7154 1.206e-14 ***
x2           2.162101   0.695432  3.1090  0.001877 ** 
logSigmaMu  -0.271720   0.245537 -1.1066  0.268452    
logSigmaNu   0.021602   0.131454  0.1643  0.869468    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEff )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.28608584  1.66814089  2.16210124 -0.27171978  0.02160237 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-3.902504e-10 -7.355350e-11 -1.760892e-10  2.768275e-10  1.550483e-10 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept) -12.1094536  -2.411849 -6.2310528   0.5765148  -3.3028157
x1           -2.4118486 -24.672851 -1.0676714   6.6539749   4.3003033
x2           -6.2310528  -1.067671 -5.2841582   0.5312223  -1.2714094
logSigmaMu    0.5765148   6.653975  0.5312223 -18.4775043   0.5816005
logSigmaNu   -3.3028157   4.300303 -1.2714094   0.5816005 -60.0907183

$code
[1] 1

$message
[1] "gradient close to zero"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 5

$type
[1] "Newton-Raphson maximisation"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -1.00325619  0.04698773 -0.15937487  0.2257343 -1.1722606
 [2,] -1.99580528 -0.05333943 -1.38167081  1.5622928 -0.5713706
 [3,]  1.80898165  0.51931221  1.75011667  1.1419605  2.4275413
 [4,] -0.09997157 -0.16044361 -0.54137752 -0.8792969 -1.5255370
 [5,]  0.02248107  0.99732185  0.62198299 -0.7848731 -0.5062587
 [6,]  0.04934608 -0.45787289  0.20621588 -0.5670581 -1.7345618
 [7,] -0.12071859 -2.92881950 -0.22854828 -0.7114816  5.4408662
 [8,] -0.33429414  0.41774805  0.03058201 -0.4993695 -1.1667021
 [9,]  1.58194928  0.42167767  0.46488246  0.5921566 -1.5568824
[10,] -0.36903589 -0.34101120 -0.12018482 -0.3331574 -2.1362240
[11,]  0.04684448  1.41144375 -0.57636972 -1.1027605  2.5894892
[12,]  2.06116303  0.69188218  1.15347643  0.8212200 -1.3881507
[13,]  0.32105309 -0.09985514  0.21426741 -0.3404762 -1.6828877
[14,] -2.02642117 -1.48946795 -1.07532418  1.8283601  2.8345342
[15,]  0.05768414  1.02443630 -0.35867363 -0.9532511  0.1484046

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## BHHH method
> system.time( randEffBhhh <- tobit( y ~ x1 + x2, data = pData,
+    method = "BHHH" ) )
   user  system elapsed 
  0.276   0.000   0.282 
> summary( randEffBhhh )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 17 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.285998   0.489733 -0.5840  0.559229    
x1           1.668070   0.301259  5.5370 3.077e-08 ***
x2           2.162093   0.701235  3.0833  0.002047 ** 
logSigmaMu  -0.271676   0.290968 -0.9337  0.350459    
logSigmaNu   0.021567   0.135004  0.1597  0.873078    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffBhhh )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 -0.2859980   1.6680697   2.1620929  -0.2716763   0.0215668 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-0.0006981370  0.0016888486 -0.0003593596 -0.0012506398  0.0015772346 

$hessian
            (Intercept)         x1          x2  logSigmaMu logSigmaNu
(Intercept)  -19.501916  -6.558563 -11.5351813   2.1521833   4.193172
x1            -6.558563 -16.301033  -3.7039541   2.2767848  15.787720
x2           -11.535181  -3.703954  -8.9964973  -0.0235633   2.923683
logSigmaMu     2.152183   2.276785  -0.0235633 -12.9824693  -2.454789
logSigmaNu     4.193172  15.787720   2.9236828  -2.4547885 -70.662835
attr(,"type")
[1] "BHHH"

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 17

$type
[1] "BHHH maximisation"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -1.00326638  0.04712153 -0.15932834  0.2258171 -1.1720873
 [2,] -1.99571998 -0.05318182 -1.38159334  1.5622925 -0.5713367
 [3,]  1.80884381  0.51938322  1.75007608  1.1416408  2.4275532
 [4,] -0.10018586 -0.16040499 -0.54153554 -0.8795940 -1.5252102
 [5,]  0.02238911  0.99743226  0.62198526 -0.7850359 -0.5060357
 [6,]  0.04912180 -0.45780312  0.20605265 -0.5672080 -1.7344575
 [7,] -0.12073945 -2.92892450 -0.22856048 -0.7115496  5.4409823
 [8,] -0.33433353  0.41778267  0.03057266 -0.4993844 -1.1666756
 [9,]  1.58183731  0.42188326  0.46483692  0.5921666 -1.5571236
[10,] -0.36899622 -0.34095090 -0.12017057 -0.3330933 -2.1362995
[11,]  0.04693391  1.41162726 -0.57638791 -1.1028987  2.5900671
[12,]  2.06119178  0.69195026  1.15347032  0.8213068 -1.3882473
[13,]  0.32073939 -0.09967247  0.21409451 -0.3407213 -1.6828800
[14,] -2.02631525 -1.48912610 -1.07521308  1.8282856  2.8346474
[15,]  0.05780145  1.02457228 -0.35865852 -0.9532749  0.1486807

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## BFGS method (optim)
> system.time( randEffBfgs <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGS" ) )
   user  system elapsed 
  0.312   0.004   0.325 
> summary( randEffBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 33 iterations
Return code 0: successful convergence 
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286085   0.464842 -0.6154  0.538260    
x1           1.668140   0.216208  7.7154 1.206e-14 ***
x2           2.162101   0.695432  3.1090  0.001877 ** 
logSigmaMu  -0.271720   0.245537 -1.1066  0.268451    
logSigmaNu   0.021602   0.131454  0.1643  0.869473    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffBfgs )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.28608532  1.66814025  2.16210146 -0.27172019  0.02160159 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-3.786177e-06  8.143843e-06 -2.945772e-06  3.384671e-06  4.170254e-05 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept) -12.1094609  -2.411852 -6.2310559   0.5765237  -3.3028143
x1           -2.4118522 -24.672890 -1.0676730   6.6539845   4.3002891
x2           -6.2310559  -1.067673 -5.2841624   0.5312273  -1.2714065
logSigmaMu    0.5765237   6.653984  0.5312273 -18.4775359   0.5816021
logSigmaNu   -3.3028143   4.300289 -1.2714065   0.5816021 -60.0907706

$code
[1] 0

$message
[1] "successful convergence "

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
function 
      33 

$type
[1] "BFGS maximisation"

$constraints
NULL

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -1.00325780  0.04698822 -0.15937498  0.2257354 -1.1722572
 [2,] -1.99580623 -0.05333875 -1.38167152  1.5622946 -0.5713701
 [3,]  1.80898154  0.51931228  1.75011741  1.1419617  2.4275422
 [4,] -0.09997268 -0.16044350 -0.54137892 -0.8792985 -1.5255332
 [5,]  0.02248075  0.99732301  0.62198366 -0.7848737 -0.5062564
 [6,]  0.04934538 -0.45787171  0.20621534 -0.5670583 -1.7345600
 [7,] -0.12071881 -2.92882343 -0.22854860 -0.7114818  5.4408735
 [8,] -0.33429457  0.41774834  0.03058188 -0.4993695 -1.1667021
 [9,]  1.58195064  0.42167936  0.46488282  0.5921571 -1.5568815
[10,] -0.36903648 -0.34101156 -0.12018515 -0.3331565 -2.1362240
[11,]  0.04684493  1.41144618 -0.57637048 -1.1027612  2.5894979
[12,]  2.06116517  0.69188350  1.15347735  0.8212205 -1.3881479
[13,]  0.32105192 -0.09985455  0.21426677 -0.3404772 -1.6828866
[14,] -2.02642225 -1.48946764 -1.07532442  1.8283617  2.8345385
[15,]  0.05768469  1.02443839 -0.35867410 -0.9532509  0.1484085

attr(,"class")
[1] "tobit"  "maxLik" "maxim" 
> 
> 
> ## BFGS method (R)
> system.time( randEffBfgsr <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.208   0.000   0.208 
> summary( randEffBfgsr )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286084   0.464841 -0.6154  0.538262    
x1           1.668139   0.216208  7.7154 1.206e-14 ***
x2           2.162099   0.695432  3.1090  0.001877 ** 
logSigmaMu  -0.271721   0.245537 -1.1066  0.268450    
logSigmaNu   0.021602   0.131454  0.1643  0.869469    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffBfgsr )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.28608372  1.66813878  2.16209927 -0.27172103  0.02160228 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-8.683662e-06  4.032177e-05 -1.073595e-06  9.248918e-06 -8.743042e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept) -12.1094921  -2.411863 -6.2310710   0.5765159  -3.3028187
x1           -2.4118628 -24.672882 -1.0676809   6.6539570   4.3002393
x2           -6.2310710  -1.067681 -5.2841686   0.5312222  -1.2714149
logSigmaMu    0.5765159   6.653957  0.5312222 -18.4774805   0.5815668
logSigmaNu   -3.3028187   4.300239 -1.2714149   0.5815668 -60.0906900

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -1.00325613  0.04699078 -0.15937371  0.2257328 -1.1722543
 [2,] -1.99580777 -0.05333759 -1.38167201  1.5622945 -0.5713694
 [3,]  1.80898428  0.51931864  1.75011868  1.1419658  2.4275399
 [4,] -0.09996972 -0.16044247 -0.54137594 -0.8792970 -1.5255386
 [5,]  0.02248116  0.99732429  0.62198406 -0.7848724 -0.5062557
 [6,]  0.04934958 -0.45786447  0.20621700 -0.5670556 -1.7345638
 [7,] -0.12072000 -2.92881651 -0.22854841 -0.7114796  5.4408513
 [8,] -0.33429617  0.41774944  0.03058135 -0.4993677 -1.1667041
 [9,]  1.58194713  0.42168251  0.46488166  0.5921542 -1.5568841
[10,] -0.36903799 -0.34101033 -0.12018605 -0.3331566 -2.1362256
[11,]  0.04684348  1.41144431 -0.57637054 -1.1027581  2.5894900
[12,]  2.06116299  0.69188308  1.15347633  0.8212186 -1.3881495
[13,]  0.32105170 -0.09985367  0.21426666 -0.3404795 -1.6828866
[14,] -2.02642335 -1.48946500 -1.07532505  1.8283575  2.8345378
[15,]  0.05768213  1.02443731 -0.35867510 -0.9532476  0.1484039

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## left-censoring at 5
> pData$yAdd <- pData$y + 5
> randEffAdd <- tobit( yAdd ~ x1 + x2, data = pData, method = "BFGSR", left = 5 )
> summary( randEffAdd )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept)  4.713916   0.464841 10.1409 < 2.2e-16 ***
x1           1.668139   0.216208  7.7154 1.206e-14 ***
x2           2.162099   0.695432  3.1090  0.001877 ** 
logSigmaMu  -0.271721   0.245537 -1.1066  0.268450    
logSigmaNu   0.021602   0.131454  0.1643  0.869469    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffAdd )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 4.71391628  1.66813878  2.16209927 -0.27172103  0.02160228 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-8.683662e-06  4.032177e-05 -1.073595e-06  9.248918e-06 -8.743042e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept) -12.1094921  -2.411863 -6.2310710   0.5765159  -3.3028187
x1           -2.4118628 -24.672882 -1.0676809   6.6539570   4.3002393
x2           -6.2310710  -1.067681 -5.2841686   0.5312222  -1.2714149
logSigmaMu    0.5765159   6.653957  0.5312222 -18.4774805   0.5815668
logSigmaNu   -3.3028187   4.300239 -1.2714149   0.5815668 -60.0906900

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -1.00325613  0.04699078 -0.15937371  0.2257328 -1.1722543
 [2,] -1.99580777 -0.05333759 -1.38167201  1.5622945 -0.5713694
 [3,]  1.80898428  0.51931864  1.75011868  1.1419658  2.4275399
 [4,] -0.09996972 -0.16044247 -0.54137594 -0.8792970 -1.5255386
 [5,]  0.02248116  0.99732429  0.62198406 -0.7848724 -0.5062557
 [6,]  0.04934958 -0.45786447  0.20621700 -0.5670556 -1.7345638
 [7,] -0.12072000 -2.92881651 -0.22854841 -0.7114796  5.4408513
 [8,] -0.33429617  0.41774944  0.03058135 -0.4993677 -1.1667041
 [9,]  1.58194713  0.42168251  0.46488166  0.5921542 -1.5568841
[10,] -0.36903799 -0.34101033 -0.12018605 -0.3331566 -2.1362256
[11,]  0.04684348  1.41144431 -0.57637054 -1.1027581  2.5894900
[12,]  2.06116299  0.69188308  1.15347633  0.8212186 -1.3881495
[13,]  0.32105170 -0.09985367  0.21426666 -0.3404795 -1.6828866
[14,] -2.02642335 -1.48946500 -1.07532505  1.8283575  2.8345378
[15,]  0.05768213  1.02443731 -0.35867510 -0.9532476  0.1484039

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## right-censoring
> pData$yNeg <- - pData$y
> randEffNeg <- tobit( yNeg ~ x1 + x2, data = pData, method = "BFGSR",
+    left = -Inf, right = 0 )
> summary( randEffNeg )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept)  0.286084   0.464841  0.6154  0.538262    
x1          -1.668139   0.216208 -7.7154 1.206e-14 ***
x2          -2.162099   0.695432 -3.1090  0.001877 ** 
logSigmaMu  -0.271721   0.245537 -1.1066  0.268450    
logSigmaNu   0.021602   0.131454  0.1643  0.869469    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffNeg )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.28608372 -1.66813878 -2.16209927 -0.27172103  0.02160228 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 8.683662e-06 -4.032177e-05  1.073595e-06  9.248918e-06 -8.743042e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept) -12.1094921  -2.411863 -6.2310710  -0.5765159   3.3028187
x1           -2.4118628 -24.672882 -1.0676809  -6.6539570  -4.3002393
x2           -6.2310710  -1.067681 -5.2841686  -0.5312222   1.2714149
logSigmaMu   -0.5765159  -6.653957 -0.5312222 -18.4774805   0.5815668
logSigmaNu    3.3028187  -4.300239  1.2714149   0.5815668 -60.0906900

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,]  1.00325613 -0.04699078  0.15937371  0.2257328 -1.1722543
 [2,]  1.99580777  0.05333759  1.38167201  1.5622945 -0.5713694
 [3,] -1.80898428 -0.51931864 -1.75011868  1.1419658  2.4275399
 [4,]  0.09996972  0.16044247  0.54137594 -0.8792970 -1.5255386
 [5,] -0.02248116 -0.99732429 -0.62198406 -0.7848724 -0.5062557
 [6,] -0.04934958  0.45786447 -0.20621700 -0.5670556 -1.7345638
 [7,]  0.12072000  2.92881651  0.22854841 -0.7114796  5.4408513
 [8,]  0.33429617 -0.41774944 -0.03058135 -0.4993677 -1.1667041
 [9,] -1.58194713 -0.42168251 -0.46488166  0.5921542 -1.5568841
[10,]  0.36903799  0.34101033  0.12018605 -0.3331566 -2.1362256
[11,] -0.04684348 -1.41144431  0.57637054 -1.1027581  2.5894900
[12,] -2.06116299 -0.69188308 -1.15347633  0.8212186 -1.3881495
[13,] -0.32105170  0.09985367 -0.21426666 -0.3404795 -1.6828866
[14,]  2.02642335  1.48946500  1.07532505  1.8283575  2.8345378
[15,] -0.05768213 -1.02443731  0.35867510 -0.9532476  0.1484039

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## right-censoring at -5
> pData$yAddNeg <- - pData$yAdd
> randEffAddNeg <- tobit( yAddNeg ~ x1 + x2, data = pData, method = "BFGSR",
+    left = -Inf, right = -5 )
> summary( randEffAddNeg )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error  t value   Pr(> t)    
(Intercept) -4.713916   0.464841 -10.1409 < 2.2e-16 ***
x1          -1.668139   0.216208  -7.7154 1.206e-14 ***
x2          -2.162099   0.695432  -3.1090  0.001877 ** 
logSigmaMu  -0.271721   0.245537  -1.1066  0.268450    
logSigmaNu   0.021602   0.131454   0.1643  0.869469    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffAddNeg )
$maximum
[1] -73.72082

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-4.71391628 -1.66813878 -2.16209927 -0.27172103  0.02160228 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 8.683662e-06 -4.032177e-05  1.073595e-06  9.248918e-06 -8.743042e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept) -12.1094921  -2.411863 -6.2310710  -0.5765159   3.3028187
x1           -2.4118628 -24.672882 -1.0676809  -6.6539570  -4.3002393
x2           -6.2310710  -1.067681 -5.2841686  -0.5312222   1.2714149
logSigmaMu   -0.5765159  -6.653957 -0.5312222 -18.4774805   0.5815668
logSigmaNu    3.3028187  -4.300239  1.2714149   0.5815668 -60.0906900

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,]  1.00325613 -0.04699078  0.15937371  0.2257328 -1.1722543
 [2,]  1.99580777  0.05333759  1.38167201  1.5622945 -0.5713694
 [3,] -1.80898428 -0.51931864 -1.75011868  1.1419658  2.4275399
 [4,]  0.09996972  0.16044247  0.54137594 -0.8792970 -1.5255386
 [5,] -0.02248116 -0.99732429 -0.62198406 -0.7848724 -0.5062557
 [6,] -0.04934958  0.45786447 -0.20621700 -0.5670556 -1.7345638
 [7,]  0.12072000  2.92881651  0.22854841 -0.7114796  5.4408513
 [8,]  0.33429617 -0.41774944 -0.03058135 -0.4993677 -1.1667041
 [9,] -1.58194713 -0.42168251 -0.46488166  0.5921542 -1.5568841
[10,]  0.36903799  0.34101033  0.12018605 -0.3331566 -2.1362256
[11,] -0.04684348 -1.41144431  0.57637054 -1.1027581  2.5894900
[12,] -2.06116299 -0.69188308 -1.15347633  0.8212186 -1.3881495
[13,] -0.32105170  0.09985367 -0.21426666 -0.3404795 -1.6828866
[14,]  2.02642335  1.48946500  1.07532505  1.8283575  2.8345378
[15,] -0.05768213 -1.02443731  0.35867510 -0.9532476  0.1484039

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## re-order observations/individuals
> set.seed( 234 )
> perm <- sample( nId )
> nData2 <- nData
> nData2$id <- NA
> for( i in 1:nId ) {
+    nData2$id[ nData$id == paste( "F", i, sep = "_" ) ] <-
+       paste( "G", perm[ i ], sep = "_" )
+ }
> pData2 <- pdata.frame( nData2, c( "id", "time" ) )
> system.time( randEffBfgsr2 <- tobit( y ~ x1 + x2, data = pData2,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.204   0.000   0.208 
> all.equal( randEffBfgsr2[ -11 ], randEffBfgsr[ -11 ] )
[1] TRUE
> all.equal( sort( randEffBfgsr2[[ 11 ]] ), sort( randEffBfgsr[[ 11 ]] ) )
[1] TRUE
> 
> 
> ## unbalanced panel data
> nDataUnb <- nData[ -c( 2, 5, 6, 8 ), ]
> pDataUnb <- pdata.frame( nDataUnb, c( "id", "time" ) )
> system.time( randEffBfgsrUnb <- tobit( y ~ x1 + x2, data = pDataUnb,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.228   0.004   0.238 
> summary( randEffBfgsrUnb )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -71.64188 
5  free parameters
Estimates:
            Estimate Std. error t value   Pr(> t)    
(Intercept) -0.14649    0.46303 -0.3164  0.751725    
x1           1.63291    0.21830  7.4801 7.425e-14 ***
x2           2.04155    0.70218  2.9075  0.003644 ** 
logSigmaMu  -0.30669    0.25616 -1.1973  0.231201    
logSigmaNu   0.02966    0.13442  0.2206  0.825369    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> print.default( randEffBfgsrUnb )
$maximum
[1] -71.64188

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.14648739  1.63291201  2.04155289 -0.30669193  0.02965964 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-7.175139e-07 -9.179170e-06  4.108755e-07  7.410394e-07  8.210194e-06 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -12.575479  -2.677653 -6.4444666   1.3608546  -4.3212756
x1            -2.677653 -24.334086 -1.1673999   6.8081993   2.8998454
x2            -6.444467  -1.167400 -5.3411361   0.9986278  -2.1369457
logSigmaMu     1.360855   6.808199  0.9986278 -17.2474055   0.1279004
logSigmaNu    -4.321276   2.899845 -2.1369457   0.1279004 -57.4815937

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 10

$type
[1] "BFGS-YC maximization"

$gradientObs
       (Intercept)           x1           x2 logSigmaMu logSigmaNu
 [1,] -0.556420439  0.025364649  0.068934322 -0.2658030 -0.6143245
 [2,] -2.077530825 -0.031247253 -1.418434933  1.7031271 -0.5469527
 [3,]  1.917673954  0.669249545  1.834281079  1.1543273  2.5646264
 [4,] -0.048571478 -0.131171291 -0.479081626 -0.9331902 -1.6007673
 [5,] -0.004144397  1.046096092  0.639869787 -0.7731091 -0.4009085
 [6,]  0.078141568 -0.379699412  0.214246218 -0.6253549 -1.6851484
 [7,] -0.217432692 -2.812544289 -0.242232953 -0.6077163  4.9690521
 [8,] -0.004629332  0.001009078 -0.002647679 -0.3512473 -0.6487176
 [9,]  1.394746474  0.531668111  0.401948486  0.4494326 -1.7874279
[10,] -0.528041165 -0.392696792 -0.200200800 -0.2119666 -2.1915577
[11,]  0.005759036  1.358215483 -0.578486905 -0.9410510  2.3171530
[12,]  1.960061719  0.657345615  1.114662625  0.7531269 -1.5796346
[13,]  0.244497630 -0.044980008  0.176018182 -0.4919119 -1.6331218
[14,] -2.112801028 -1.484766033 -1.123132036  1.9005278  2.9291585
[15,] -0.051309741  0.988147326 -0.405743358 -0.7591906 -0.0914206

attr(,"class")
[1] "tobit"  "maxLik" "maxim"  "list"  
> 
> 
> ## NAs in data
> pDataNa <- pData
> obsNa <- which( ! rownames( pData ) %in% rownames( pDataUnb ) )
> pDataNa$y[ obsNa[ 1:2 ] ] <- NA
> pDataNa$x1[ obsNa[ 3 ] ] <- NA
> pDataNa$x2[ obsNa[ c( 1, 2, 4 ) ] ] <- NA
> system.time( randEffBfgsrNa <- tobit( y ~ x1 + x2, data = pDataNa,
+    method = "BFGSR" ) )
   user  system elapsed 
  0.224   0.000   0.228 
> all.equal( randEffBfgsrNa, randEffBfgsrUnb )
[1] TRUE
> 
> 
> 
