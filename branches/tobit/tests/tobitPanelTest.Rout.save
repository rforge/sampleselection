
R version 2.11.1 (2010-05-31)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( sampleSelection )
Loading required package: maxLik
Loading required package: miscTools
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'

The following object(s) are masked from 'package:base':

    det

Loading required package: car
Loading required package: MASS
Loading required package: nnet
Loading required package: survival
Loading required package: splines

Attaching package: 'car'

The following object(s) are masked from 'package:miscTools':

    coefTable

Loading required package: lmtest
Loading required package: zoo
> library( plm )
Loading required package: kinship
Loading required package: nlme
[1] "kinship is loaded"
Loading required package: Formula
Loading required package: sandwich
> 
> nId <- 15
> nTime <- 4
> 
> set.seed( 123 )
> pData <- data.frame(
+    id = rep( paste( "F", 1:nId, sep = "_" ), each = nTime ),
+    time = rep( 1980 + 1:nTime, nId ) )
> pData$ui <- rep( rnorm( nId ), each = nTime )
> pData$x1 <- rnorm( nId * nTime )
> pData$x2 <- runif( nId * nTime )
> pData$ys <- -1 + pData$ui + 2 * pData$x1 + 3 * pData$x2 + rnorm( nId * nTime )
> pData$y <- ifelse( pData$ys > 0, pData$ys, 0 )
> pData <- pdata.frame( pData, c( "id", "time" ) )
> 
> 
> ## Newton-Raphson method
> system.time( randEff <- tobit( y ~ x1 + x2, data = pData ) )
   user  system elapsed 
 18.801   0.008  18.977 
> summary( randEff )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286086   0.465007 -0.6152  0.538403    
x1           1.668141   0.216155  7.7173 1.188e-14 ***
x2           2.162101   0.696374  3.1048  0.001904 ** 
logSigmaMu  -0.271720   0.245441 -1.1071  0.268265    
logSigmaNu   0.021602   0.131464  0.1643  0.869478    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## BHHH method
> system.time( randEffBhhh <- tobit( y ~ x1 + x2, data = pData,
+    method = "BHHH" ) )
   user  system elapsed 
 11.417   0.004  11.458 
> summary( randEffBhhh )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 17 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.285998   0.489733 -0.5840  0.559229    
x1           1.668070   0.301259  5.5370 3.077e-08 ***
x2           2.162093   0.701235  3.0833  0.002047 ** 
logSigmaMu  -0.271676   0.290968 -0.9337  0.350459    
logSigmaNu   0.021567   0.135004  0.1597  0.873078    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## BFGS method (optim)
> system.time( randEffBfgs <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGS" ) )
   user  system elapsed 
  7.784   0.000   7.787 
> summary( randEffBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 33 iterations
Return code 0: successful convergence 
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286085   0.465529 -0.6145  0.538860    
x1           1.668140   0.216236  7.7144 1.215e-14 ***
x2           2.162101   0.696349  3.1049  0.001903 ** 
logSigmaMu  -0.271720   0.245589 -1.1064  0.268552    
logSigmaNu   0.021602   0.131456  0.1643  0.869474    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## BFGS method (R)
> system.time( randEffBfgsr <- tobit( y ~ x1 + x2, data = pData,
+    method = "BFGSR" ) )
   user  system elapsed 
  6.841   0.000   6.848 
> summary( randEffBfgsr )
--------------------------------------------
Maximum Likelihood estimation
BFGS-YC maximization, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.72082 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.286084   0.465700 -0.6143  0.539011    
x1           1.668139   0.216305  7.7120 1.239e-14 ***
x2           2.162099   0.696446  3.1045  0.001906 ** 
logSigmaMu  -0.271721   0.245457 -1.1070  0.268295    
logSigmaNu   0.021602   0.131458  0.1643  0.869473    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
