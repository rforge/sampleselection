
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "mvProbit" )
Loading required package: mvtnorm
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
Loading required package: abind
> library( "miscTools" )
> 
> # covariance matrix
> sigma <- miscTools::symMatrix( c( 1, 0.2, 0.4, 1, -0.1, 1 ) )
> 
> ######## only upper ##########
> upper <- c( -0.3, 0.7, -0.5 )
> # Genz + Bretz (default)
> pug <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = GenzBretz(), random.seed = 123 )
> print( pug )
[1] 0.1360783
attr(,"error")
[1] 0.000118605
attr(,"msg")
[1] "Normal Completion"
> 
> # Miwa (as function)
> pum <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = Miwa, random.seed = 123 )
> print( pum )
[1] 0.136069
attr(,"error")
[1] NA
attr(,"msg")
[1] "Normal Completion"
> all.equal( pug, pum, check.attributes = FALSE, tol = 1e-4 )
[1] TRUE
> 
> # Miwa (as object returned from function Miwa())
> pum1 <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = Miwa(), random.seed = 123 )
> all.equal( pum, pum1 )
[1] TRUE
> 
> # Miwa (as character string)
> pum2 <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = "Miwa", random.seed = 123 )
> all.equal( pum, pum2 )
[1] TRUE
> 
> # TVPACK
> put <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = TVPACK, random.seed = 123 )
> print( put )
[1] 0.136069
attr(,"error")
[1] 1e-06
attr(,"msg")
[1] "Normal Completion"
> all.equal( pug, put, check.attributes = FALSE, tol = 1e-4 )
[1] TRUE
> all.equal( pum, put, check.attributes = FALSE, tol = 1e-6 )
[1] TRUE
> 
> # GHK
> pughk <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = "ghk", random.seed = 123, nGHK = 1000 )
> print( pughk )
[1] 0.1360032
> all.equal( pug, pughk, tol = 1e-3, check.attributes = FALSE )
[1] TRUE
> all.equal( pum, pughk, tol = 1e-3, check.attributes = FALSE )
[1] TRUE
> 
> # GHK, lower precision
> pughk1 <- mvProbit:::pmvnormWrap( upper = upper, sigma = sigma, 
+    algorithm = "ghk", random.seed = 123, nGHK = 100 )
> print( pughk1 )
[1] 0.136272
> all.equal( pughk, pughk1, tol = 1e-2, check.attributes = FALSE )
[1] TRUE
> all.equal( pug, pughk1, tol = 1e-2, check.attributes = FALSE )
[1] TRUE
> 
> 
> ######## only lower ##########
> lower <- c( -0.7, 0.3, -0.9 )
> # Genz + Bretz (default)
> plg <- mvProbit:::pmvnormWrap( lower = lower, sigma = sigma, 
+    algorithm = GenzBretz, random.seed = 123 )
> print( plg )
[1] 0.2613009
attr(,"error")
[1] 0.000112777
attr(,"msg")
[1] "Normal Completion"
> 
> # Miwa
> plm <- mvProbit:::pmvnormWrap( lower = lower, sigma = sigma, 
+    algorithm = Miwa, random.seed = 123 )
> print( plm )
[1] 0.2612964
attr(,"error")
[1] NA
attr(,"msg")
[1] "Normal Completion"
> all.equal( plg, plm, tol = 1e-4, check.attributes = FALSE )
[1] TRUE
> 
> # TVPACK
> plt <- mvProbit:::pmvnormWrap( lower = lower, sigma = sigma, 
+    algorithm = TVPACK, random.seed = 123 )
> print( plt )
[1] 0.2612964
attr(,"error")
[1] 1e-06
attr(,"msg")
[1] "Normal Completion"
> all.equal( plg, plt, tol =1e-4, check.attributes = FALSE )
[1] TRUE
> all.equal( plm, plt, check.attributes = FALSE, tolerance = 1e-8 )
[1] TRUE
> 
> # GHK
> plghk <- mvProbit:::pmvnormWrap( lower = lower, sigma = sigma, 
+    algorithm = "GHK", random.seed = 123, nGHK = 1000 )
> print( plghk )
[1] 0.2613852
> all.equal( plg, plghk, tol = 1e-3, check.attributes = FALSE )
[1] TRUE
> all.equal( plm, plghk, tol = 1e-3, check.attributes = FALSE )
[1] TRUE
> 
> 
> ######## partly lower, partly upper ##########
> lower2 <- c( -Inf, 0.3, -Inf )
> upper2 <- c( -0.3, Inf, -0.5 )
> # Genz + Bretz (default)
> pbg <- mvProbit:::pmvnormWrap( lower = lower2, upper = upper2, sigma = sigma, 
+    algorithm = GenzBretz(), random.seed = 123 )
> print( pbg )
[1] 0.06244105
attr(,"error")
[1] 0.0001142209
attr(,"msg")
[1] "Normal Completion"
> 
> # Miwa
> pbm <- mvProbit:::pmvnormWrap( lower = lower2, upper = upper2, sigma = sigma, 
+    algorithm = Miwa, random.seed = 123 )
> print( pbm )
[1] 0.06246127
attr(,"error")
[1] NA
attr(,"msg")
[1] "Normal Completion"
> all.equal( pbg, pbm, tol = 1e-3, check.attributes = FALSE )
[1] TRUE
> 
> # GHK
> pbghk <- mvProbit:::pmvnormWrap( lower = lower2, upper = upper2, sigma = sigma, 
+    algorithm = "GHK", random.seed = 123, nGHK = 1000 )
> print( pbghk )
[1] 0.06246009
> all.equal( pbg, pbghk, tol = 1e-3, check.attributes = FALSE )
[1] TRUE
> all.equal( pbm, pbghk, tol = 1e-4, check.attributes = FALSE )
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  0.384   0.008   0.391 
