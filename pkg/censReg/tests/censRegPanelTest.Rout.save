
R version 2.14.2 (2012-02-29)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( censReg )
Loading required package: maxLik
Loading required package: miscTools
> library( plm )
Loading required package: bdsmatrix

Attaching package: 'bdsmatrix'

The following object(s) are masked from 'package:base':

    backsolve

Loading required package: nlme
Loading required package: Formula
Loading required package: MASS
Loading required package: sandwich
Loading required package: zoo

Attaching package: 'zoo'

The following object(s) are masked from 'package:base':

    as.Date, as.Date.numeric

> 
> nId <- 15
> nTime <- 4
> 
> set.seed( 123 )
> pData <- data.frame(
+    id = rep( paste( "F", 1:nId, sep = "_" ), each = nTime ),
+    time = rep( 1980 + 1:nTime, nId ) )
> pData$ui <- rep( rnorm( nId ), each = nTime )
> pData$x1 <- rnorm( nId * nTime )
> pData$x2 <- runif( nId * nTime )
> pData$ys <- -1 + pData$ui + 2 * pData$x1 + 3 * pData$x2 + rnorm( nId * nTime )
> pData$y <- ifelse( pData$ys > 0, pData$ys, 0 )
> nData <- pData # save data set without information on panel structure
> pData <- pdata.frame( pData, c( "id", "time" ) )
> 
> 
> ## Newton-Raphson method
> randEff <- censReg( y ~ x1 + x2, data = pData )
> print( randEff )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -0.36562     1.68000     2.24054    -0.12955    -0.01241 

> print( randEff, logSigma = FALSE )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Coefficients:
(Intercept)          x1          x2     sigmaMu     sigmaNu 
    -0.3656      1.6800      2.2405      0.8785      0.9877 

> maxLik:::summary.maxLik( randEff )
--------------------------------------------
Maximum Likelihood estimation
Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365623   0.474457 -0.7706 0.4409361    
x1           1.680004   0.209222  8.0298 9.767e-16 ***
x2           2.240544   0.673889  3.3248 0.0008848 ***
logSigmaMu  -0.129547   0.258070 -0.5020 0.6156793    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237786    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEff )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -0.36562    0.47446  -0.771 0.440936    
x1           1.68000    0.20922   8.030 9.77e-16 ***
x2           2.24054    0.67389   3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615679    
logSigmaNu  -0.01241    0.12969  -0.096 0.923779    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-likelihood: -73.19882 on 5 Df

> print( summary( randEff ), logSigma = FALSE )

Call:
censReg(formula = y ~ x1 + x2, data = pData)

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.3656     0.4745  -0.771 0.440936    
x1            1.6800     0.2092   8.030 9.77e-16 ***
x2            2.2405     0.6739   3.325 0.000885 ***
sigmaMu       0.8785     0.2267   3.875 0.000107 ***
sigmaNu       0.9877     0.1281   7.711 1.25e-14 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

Newton-Raphson maximisation, 5 iterations
Return code 1: gradient close to zero
Log-likelihood: -73.19882 on 5 Df

> coef( randEff )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562313  1.68000400  2.24054376 -0.12954703 -0.01240809 
> coef( randEff, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
 -0.3656231   1.6800040   2.2405438   0.8784933   0.9876686 
> vcov( randEff )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225109672 -0.020570167 -0.254602886 -0.023824162 -0.002973952
x1          -0.020570167  0.043773972  0.008562225  0.013404079  0.002969957
x2          -0.254602886  0.008562225  0.454125882  0.017179542  0.001505438
logSigmaMu  -0.023824162  0.013404079  0.017179542  0.066600320 -0.002638871
logSigmaNu  -0.002973952  0.002969957  0.001505438 -0.002638871  0.016819442
> vcov( randEff, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225109672 -0.020570167 -0.254602886 -0.020929366 -0.002937279
x1          -0.020570167  0.043773972  0.008562225  0.011775394  0.002933333
x2          -0.254602886  0.008562225  0.454125882  0.015092113  0.001486874
sigmaMu     -0.020929366  0.011775394  0.015092113  0.051398826 -0.002289643
sigmaNu     -0.002937279  0.002933333  0.001486874 -0.002289643  0.016407184
> coef( summary( randEff ) )
               Estimate Std. error     t value      Pr(> t)
(Intercept) -0.36562313  0.4744572 -0.77061344 4.409361e-01
x1           1.68000400  0.2092223  8.02975581 9.766687e-16
x2           2.24054376  0.6738886  3.32479829 8.848252e-04
logSigmaMu  -0.12954703  0.2580704 -0.50198333 6.156793e-01
logSigmaNu  -0.01240809  0.1296898 -0.09567514 9.237786e-01
> coef( summary( randEff ), logSigma = FALSE )
              Estimate Std. error    t value      Pr(> t)
(Intercept) -0.3656231  0.4744572 -0.7706134 4.409361e-01
x1           1.6800040  0.2092223  8.0297558 9.766687e-16
x2           2.2405438  0.6738886  3.3247983 8.848252e-04
sigmaMu      0.8784933  0.2267131  3.8749120 1.066632e-04
sigmaNu      0.9876686  0.1280905  7.7107072 1.251225e-14
> logLik( randEff )
'log Lik.' -73.19882 (df=5)
> extractAIC( randEff )
[1] -40.0000 156.3976
> print.default( randEff )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562313  1.68000400  2.24054376 -0.12954703 -0.01240809 

$gradient
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
1.711667e-11 4.533032e-11 1.345098e-11 8.229556e-12 6.209824e-11 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.321985  -4.096607 -7.3075697  -2.1079024  -1.3088177
x1            -4.096607 -26.076787 -1.9905305   4.4849638   4.7620891
x2            -7.307570  -1.990530 -6.2362552  -0.6238251  -0.4803054
logSigmaMu    -2.107902   4.484964 -0.6238251 -16.6582041  -3.7223987
logSigmaNu    -1.308818   4.762089 -0.4803054  -3.7223987 -61.0683413

$code
[1] 1

$message
[1] "gradient close to zero"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 5

$type
[1] "Newton-Raphson maximisation"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85308353  0.22558520 -0.07261010 -0.1440032 -0.9609402
 [2,] -1.70309357  0.04839424 -1.18987552  1.6807831 -1.0133141
 [3,]  1.75084247  0.33367482  1.72755770  1.8353812  1.8043727
 [4,]  0.15577733 -0.20240007 -0.43224660 -0.6891081 -1.4351382
 [5,]  0.12950026  0.98433620  0.68943625 -0.6770204 -0.5543803
 [6,]  0.33035909 -0.30928416  0.38471147 -0.4921375 -1.5793716
 [7,] -0.08212549 -3.18521871 -0.23724729 -0.6766315  6.0271932
 [8,] -0.26685300  0.37888544  0.05565473 -0.5385828 -1.1091111
 [9,]  1.14824183  0.59396387  0.30328556  0.1329802 -1.6172740
[10,] -0.43505392 -0.40640593 -0.15245982 -0.4687582 -1.9364984
[11,] -0.02839185  1.44795739 -0.64407731 -0.9172655  2.7349924
[12,]  1.21047881  0.53669833  0.61328528  0.2055542 -1.7351236
[13,]  0.53592707 -0.22523044  0.33117482 -0.3691166 -1.4082834
[14,] -1.81460674 -1.30608969 -0.91950989  1.9573174  2.5815580
[15,] -0.07791875  1.08513351 -0.45707928 -0.8393922  0.2013187

$call
censReg(formula = y ~ x1 + x2, data = pData)

$terms
y ~ x1 + x2
attr(,"variables")
list(y, x1, x2)
attr(,"factors")
   x1 x2
y   0  0
x1  1  0
x2  0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(y, x1, x2)
attr(,"dataClasses")
        y        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  0.4703506   1.0111600   1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## BHHH method
> randEffBhhh <- censReg( y ~ x1 + x2, data = pData, method = "BHHH" )
> print( randEffBhhh )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BHHH")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
    -0.3656      1.6800      2.2406     -0.1296     -0.0124 

> maxLik:::summary.maxLik( randEffBhhh )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 18 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365635   0.555054 -0.6587  0.510065    
x1           1.680016   0.293775  5.7187 1.073e-08 ***
x2           2.240556   0.729501  3.0714  0.002131 ** 
logSigmaMu  -0.129565   0.295017 -0.4392  0.660531    
logSigmaNu  -0.012402   0.140134 -0.0885  0.929481    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBhhh )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BHHH")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.3656     0.5551  -0.659  0.51006    
x1            1.6800     0.2938   5.719 1.07e-08 ***
x2            2.2406     0.7295   3.071  0.00213 ** 
logSigmaMu   -0.1296     0.2950  -0.439  0.66053    
logSigmaNu   -0.0124     0.1401  -0.088  0.92948    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BHHH maximisation, 18 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> print.default( randEffBhhh )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36563477  1.68001566  2.24055570 -0.12956535 -0.01240161 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 5.028294e-05 -3.315101e-04 -4.246354e-06  3.505038e-04 -2.626408e-04 

$hessian
            (Intercept)         x1         x2  logSigmaMu logSigmaNu
(Intercept)  -13.482494  -4.096061 -8.3241402   2.7373240   3.959016
x1            -4.096061 -17.395897 -2.1956247   2.0949384  19.029556
x2            -8.324140  -2.195625 -7.3456165  -0.2437129   3.421562
logSigmaMu     2.737324   2.094938 -0.2437129 -13.9308908  -3.639137
logSigmaNu     3.959016  19.029556  3.4215617  -3.6391374 -73.168704
attr(,"type")
[1] "BHHH"

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 18

$type
[1] "BHHH maximisation"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85309912  0.22553991 -0.07262972 -0.1439976 -0.9609756
 [2,] -1.70314125  0.04834913 -1.18991475  1.6808211 -1.0132976
 [3,]  1.75089168  0.33368134  1.72757656  1.8353986  1.8044304
 [4,]  0.15581599 -0.20240761 -0.43221921 -0.6890852 -1.4351543
 [5,]  0.12951232  0.98431668  0.68943033 -0.6770023 -0.5544220
 [6,]  0.33038531 -0.30929737  0.38473066 -0.4921403 -1.5793732
 [7,] -0.08212211 -3.18519652 -0.23724499 -0.6766142  6.0271629
 [8,] -0.26685182  0.37888104  0.05565305 -0.5385702 -1.1091241
 [9,]  1.14826405  0.59392337  0.30329461  0.1330245 -1.6172865
[10,] -0.43507487 -0.40642217 -0.15246997 -0.4687544 -1.9364930
[11,] -0.02840097  1.44793082 -0.64407223 -0.9172307  2.7348842
[12,]  1.21050842  0.53669645  0.61330484  0.2056154 -1.7351598
[13,]  0.53595825 -0.22524780  0.33119153 -0.3691112 -1.4082671
[14,] -1.81465694 -1.30619017 -0.91955280  1.9573642  2.5815611
[15,] -0.07793866  1.08511138 -0.45708215 -0.8393671  0.2012520

$call
censReg(formula = y ~ x1 + x2, data = pData, method = "BHHH")

$terms
y ~ x1 + x2
attr(,"variables")
list(y, x1, x2)
attr(,"factors")
   x1 x2
y   0  0
x1  1  0
x2  0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(y, x1, x2)
attr(,"dataClasses")
        y        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  0.4703506   1.0111600   1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## BFGS method (optim)
> randEffBfgs <- censReg( y ~ x1 + x2, data = pData, method = "BFGS" )
> print( randEffBfgs )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGS")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -0.36562     1.68000     2.24055    -0.12955    -0.01241 

> maxLik:::summary.maxLik( randEffBfgs )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 25 iterations
Return code 0: successful convergence 
Log-Likelihood: -73.19882 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.365624   0.474456 -0.7706 0.4409343    
x1           1.680002   0.209222  8.0298 9.767e-16 ***
x2           2.240551   0.673888  3.3248 0.0008848 ***
logSigmaMu  -0.129549   0.258071 -0.5020 0.6156731    
logSigmaNu  -0.012408   0.129690 -0.0957 0.9237762    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBfgs )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGS")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -0.36562    0.47446  -0.771 0.440934    
x1           1.68000    0.20922   8.030 9.77e-16 ***
x2           2.24055    0.67389   3.325 0.000885 ***
logSigmaMu  -0.12955    0.25807  -0.502 0.615673    
logSigmaNu  -0.01241    0.12969  -0.096 0.923776    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGS maximisation, 25 iterations
Return code 0: successful convergence 
Log-likelihood: -73.19882 on 5 Df

> print.default( randEffBfgs )
$maximum
[1] -73.19882

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36562386  1.68000222  2.24055118 -0.12954945 -0.01240847 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-3.160077e-05  2.178336e-05 -3.570719e-05  3.081674e-05  2.108131e-05 

$hessian
            (Intercept)         x1         x2  logSigmaMu logSigmaNu
(Intercept)  -13.322030  -4.096615 -7.3075895  -2.1078505  -1.308810
x1            -4.096615 -26.076823 -1.9905334   4.4849768   4.762042
x2            -7.307589  -1.990533 -6.2362665  -0.6237935  -0.480264
logSigmaMu    -2.107850   4.484977 -0.6237935 -16.6581488  -3.722435
logSigmaNu    -1.308810   4.762042 -0.4802640  -3.7224350 -61.068402

$code
[1] 0

$message
[1] "successful convergence "

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
function 
      25 

$type
[1] "BFGS maximisation"

$constraints
NULL

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85308743  0.22558129 -0.07261263 -0.1440013 -0.9609385
 [2,] -1.70310343  0.04839017 -1.18988370  1.6807981 -1.0133093
 [3,]  1.75084680  0.33368182  1.72755839  1.8353799  1.8043672
 [4,]  0.15577623 -0.20239996 -0.43224879 -0.6891122 -1.4351265
 [5,]  0.12949863  0.98433692  0.68943374 -0.6770205 -0.5543875
 [6,]  0.33035850 -0.30927350  0.38470918 -0.4921407 -1.5793728
 [7,] -0.08212636 -3.18521917 -0.23724752 -0.6766300  6.0271888
 [8,] -0.26685580  0.37888651  0.05565314 -0.5385807 -1.1091140
 [9,]  1.14824376  0.59396790  0.30328585  0.1329813 -1.6172723
[10,] -0.43505882 -0.40640593 -0.15246287 -0.4687554 -1.9365001
[11,] -0.02839283  1.44796138 -0.64407965 -0.9172624  2.7350038
[12,]  1.21048230  0.53670265  0.61328478  0.2055557 -1.7351212
[13,]  0.53592379 -0.22522781  0.33117257 -0.3691209 -1.4082845
[14,] -1.81461479 -1.30609804 -0.91951560  1.9573273  2.5815634
[15,] -0.07792214  1.08513754 -0.45708262 -0.8393873  0.2013247

$call
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGS")

$terms
y ~ x1 + x2
attr(,"variables")
list(y, x1, x2)
attr(,"factors")
   x1 x2
y   0  0
x1  1  0
x2  0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(y, x1, x2)
attr(,"dataClasses")
        y        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  0.4703506   1.0111600   1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"  
> 
> 
> ## BFGS method (R)
> randEffBfgsr <- censReg( y ~ x1 + x2, data = pData, method = "BFGSR" )
> print( randEffBfgsr )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
    -0.3676      1.6801      2.2435     -0.1292     -0.0124 

> maxLik:::summary.maxLik( randEffBfgsr )
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 80 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19883 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -0.367611   0.474704 -0.7744 0.4386945    
x1           1.680077   0.209242  8.0294 9.799e-16 ***
x2           2.243458   0.674000  3.3286 0.0008729 ***
logSigmaMu  -0.129231   0.258003 -0.5009 0.6164491    
logSigmaNu  -0.012404   0.129692 -0.0956 0.9238040    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBfgsr )

Call:
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.3676     0.4747  -0.774 0.438694    
x1            1.6801     0.2092   8.029  9.8e-16 ***
x2            2.2435     0.6740   3.329 0.000873 ***
logSigmaMu   -0.1292     0.2580  -0.501 0.616449    
logSigmaNu   -0.0124     0.1297  -0.096 0.923804    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 80 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19883 on 5 Df

> print.default( randEffBfgsr )
$maximum
[1] -73.19883

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-0.36761074  1.68007718  2.24345769 -0.12923070 -0.01240414 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 0.0042077961  0.0018715623 -0.0039941154 -0.0025807849  0.0001448199 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.312729  -4.095551 -7.3037718  -2.1208937  -1.3001191
x1            -4.095551 -26.073562 -1.9895089   4.4829301   4.7591140
x2            -7.303772  -1.989509 -6.2344017  -0.6289442  -0.4659542
logSigmaMu    -2.120894   4.482930 -0.6289442 -16.6722291  -3.7170417
logSigmaNu    -1.300119   4.759114 -0.4659542  -3.7170417 -61.0626180

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 80

$type
[1] "BFGSR maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85242589  0.22509248 -0.07283581 -0.1443756 -0.9638126
 [2,] -1.70254827  0.04796077 -1.18987276  1.6808162 -1.0131239
 [3,]  1.75015541  0.33336953  1.72629716  1.8352949  1.8001176
 [4,]  0.15552519 -0.20273356 -0.43291727 -0.6890610 -1.4321425
 [5,]  0.12966546  0.98378068  0.68861500 -0.6770277 -0.5573092
 [6,]  0.33018623 -0.30781408  0.38428023 -0.4919231 -1.5806254
 [7,] -0.08108222 -3.18561022 -0.23704493 -0.6769994  6.0294286
 [8,] -0.26621746  0.37841293  0.05574418 -0.5388975 -1.1087314
 [9,]  1.14834059  0.59397359  0.30322154  0.1335731 -1.6163712
[10,] -0.43417980 -0.40561975 -0.15214672 -0.4693322 -1.9366713
[11,] -0.02802911  1.44905196 -0.64432532 -0.9180032  2.7384566
[12,]  1.21000552  0.53736648  0.61222872  0.2049637 -1.7342366
[13,]  0.53619129 -0.22526746  0.33117266 -0.3686667 -1.4084405
[14,] -1.81402147 -1.30611333 -0.91932480  1.9572662  2.5794224
[15,] -0.07735767  1.08602154 -0.45708600 -0.8402084  0.2041842

$call
censReg(formula = y ~ x1 + x2, data = pData, method = "BFGSR")

$terms
y ~ x1 + x2
attr(,"variables")
list(y, x1, x2)
attr(,"factors")
   x1 x2
y   0  0
x1  1  0
x2  0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(y, x1, x2)
attr(,"dataClasses")
        y        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  0.4703506   1.0111600   1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## BHHH with starting values
> randEffBhhhStart <- censReg( y ~ x1 + x2, data = pData, method = "BHHH",
+    start = c( -0.4, 1.7, 2.2, -0.1, -0.01 ) )
> print( randEffBhhhStart )

Call:
censReg(formula = y ~ x1 + x2, data = pData, start = c(-0.4, 
    1.7, 2.2, -0.1, -0.01), method = "BHHH")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
    -0.3657      1.6800      2.2406     -0.1296     -0.0124 

> summary( randEffBhhhStart )

Call:
censReg(formula = y ~ x1 + x2, data = pData, start = c(-0.4, 
    1.7, 2.2, -0.1, -0.01), method = "BHHH")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.3657     0.5551  -0.659  0.51003    
x1            1.6800     0.2938   5.719 1.07e-08 ***
x2            2.2406     0.7295   3.071  0.00213 ** 
logSigmaMu   -0.1295     0.2950  -0.439  0.66056    
logSigmaNu   -0.0124     0.1401  -0.088  0.92948    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19882 on 5 Df

> 
> 
> ## left-censoring at 5
> pData$yAdd <- pData$y + 5
> randEffAdd <- censReg( yAdd ~ x1 + x2, data = pData, method = "BFGSR", left = 5 )
> print( randEffAdd )

Call:
censReg(formula = yAdd ~ x1 + x2, left = 5, data = pData, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
    4.63267     1.68012     2.24314    -0.12939    -0.01243 

> maxLik:::summary.maxLik( randEffAdd )
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 81 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19883 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept)  4.632667   0.474635  9.7605 < 2.2e-16 ***
x1           1.680121   0.209239  8.0297 9.772e-16 ***
x2           2.243137   0.673963  3.3283 0.0008738 ***
logSigmaMu  -0.129390   0.258032 -0.5014 0.6160549    
logSigmaNu  -0.012429   0.129690 -0.0958 0.9236486    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffAdd )

Call:
censReg(formula = yAdd ~ x1 + x2, left = 5, data = pData, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  4.63267    0.47464   9.760  < 2e-16 ***
x1           1.68012    0.20924   8.030 9.77e-16 ***
x2           2.24314    0.67396   3.328 0.000874 ***
logSigmaMu  -0.12939    0.25803  -0.501 0.616055    
logSigmaNu  -0.01243    0.12969  -0.096 0.923649    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 81 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19883 on 5 Df

> coef( randEffAdd )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 4.63266699  1.68012127  2.24313701 -0.12939018 -0.01242936 
> coef( randEffAdd, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
  4.6326670   1.6801213   2.2431370   0.8786311   0.9876476 
> vcov( randEffAdd )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225278485 -0.020610818 -0.254732319 -0.023913228 -0.003000712
x1          -0.020610818  0.043780850  0.008603793  0.013409716  0.002970852
x2          -0.254732319  0.008603793  0.454226041  0.017232631  0.001571504
logSigmaMu  -0.023913228  0.013409716  0.017232631  0.066580699 -0.002633706
logSigmaNu  -0.003000712  0.002970852  0.001571504 -0.002633706  0.016819544
> vcov( randEffAdd, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225278485 -0.020610818 -0.254732319 -0.021010905 -0.002963646
x1          -0.020610818  0.043780850  0.008603793  0.011782194  0.002934154
x2          -0.254732319  0.008603793  0.454226041  0.015141126  0.001552092
sigmaMu     -0.021010905  0.011782194  0.015141126  0.051399805 -0.002285471
sigmaNu     -0.002963646  0.002934154  0.001552092 -0.002285471  0.016406586
> logLik( randEffAdd )
'log Lik.' -73.19883 (df=5)
> extractAIC( randEffAdd )
[1] -40.0000 156.3977
> print.default( randEffAdd )
$maximum
[1] -73.19883

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 4.63266699  1.68012127  2.24313701 -0.12939018 -0.01242936 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
 3.042634e-03 -6.125809e-04 -3.999178e-03 -1.804099e-05  2.276174e-03 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.316710  -4.096270 -7.3056168  -2.1184546  -1.3013900
x1            -4.096270 -26.074957 -1.9898951   4.4838502   4.7628741
x2            -7.305617  -1.989895 -6.2354498  -0.6277379  -0.4675877
logSigmaMu    -2.118455   4.483850 -0.6277379 -16.6680343  -3.7212620
logSigmaNu    -1.301390   4.762874 -0.4675877  -3.7212620 -61.0670997

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 81

$type
[1] "BFGSR maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,] -0.85274190  0.22490182 -0.07294037 -0.1442055 -0.9633672
 [2,] -1.70300582  0.04774679 -1.19018947  1.6812905 -1.0130462
 [3,]  1.75055810  0.33334649  1.72666312  1.8354601  1.8012418
 [4,]  0.15565192 -0.20274123 -0.43281411 -0.6890615 -1.4323426
 [5,]  0.12966400  0.98379743  0.68873088 -0.6769748 -0.5570132
 [6,]  0.33023765 -0.30817831  0.38438951 -0.4920448 -1.5802630
 [7,] -0.08125222 -3.18583409 -0.23709716 -0.6768772  6.0298426
 [8,] -0.26633509  0.37846973  0.05570895 -0.5387944 -1.1088457
 [9,]  1.14846948  0.59383175  0.30327908  0.1336694 -1.6165311
[10,] -0.43450542 -0.40591419 -0.15228844 -0.4691433 -1.9365546
[11,] -0.02813143  1.44890002 -0.64432916 -0.9177529  2.7380035
[12,]  1.21023804  0.53730919  0.61246312  0.2052565 -1.7343985
[13,]  0.53626355 -0.22534575  0.33123251 -0.3687333 -1.4082733
[14,] -1.81452100 -1.30681407 -0.91965461  1.9578377  2.5801329
[15,] -0.07754723  1.08591183 -0.45715303 -0.8399445  0.2036908

$call
censReg(formula = yAdd ~ x1 + x2, left = 5, data = pData, method = "BFGSR")

$terms
yAdd ~ x1 + x2
attr(,"variables")
list(yAdd, x1, x2)
attr(,"factors")
     x1 x2
yAdd  0  0
x1    1  0
x2    0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(yAdd, x1, x2)
attr(,"dataClasses")
     yAdd        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             40              0 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  5.4703506   1.0111600   1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## right-censoring
> pData$yNeg <- - pData$y
> randEffNeg <- censReg( yNeg ~ x1 + x2, data = pData, method = "BFGSR",
+    left = -Inf, right = 0 )
> print( randEffNeg )

Call:
censReg(formula = yNeg ~ x1 + x2, left = -Inf, right = 0, data = pData, 
    method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
     0.3710     -1.6803     -2.2486     -0.1289     -0.0123 

> maxLik:::summary.maxLik( randEffNeg )
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 78 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-Likelihood: -73.1989 
5  free parameters
Estimates:
            Estimate Std. error t value   Pr(> t)    
(Intercept)  0.37098    0.47508  0.7809 0.4348777    
x1          -1.68033    0.20930 -8.0283 9.882e-16 ***
x2          -2.24864    0.67423 -3.3351 0.0008527 ***
logSigmaMu  -0.12888    0.25795 -0.4996 0.6173310    
logSigmaNu  -0.01230    0.12971 -0.0948 0.9244527    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffNeg )

Call:
censReg(formula = yNeg ~ x1 + x2, left = -Inf, right = 0, data = pData, 
    method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)   0.3710     0.4751   0.781 0.434878    
x1           -1.6803     0.2093  -8.028 9.88e-16 ***
x2           -2.2486     0.6742  -3.335 0.000853 ***
logSigmaMu   -0.1289     0.2580  -0.500 0.617331    
logSigmaNu   -0.0123     0.1297  -0.095 0.924453    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 78 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-likelihood: -73.1989 on 5 Df

> coef( randEffNeg )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.37098005 -1.68033241 -2.24863763 -0.12888106 -0.01229989 
> coef( randEffNeg, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
  0.3709800  -1.6803324  -2.2486376   0.8790785   0.9877754 
> vcov( randEffNeg )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225705015 -0.020698415 -0.255083233  0.024095604  0.003061439
x1          -0.020698415  0.043806824  0.008690725 -0.013421827 -0.002973027
x2          -0.255083233  0.008690725  0.454589751 -0.017342374 -0.001713975
logSigmaMu   0.024095604 -0.013421827 -0.017342374  0.066537985 -0.002618298
logSigmaNu   0.003061439 -0.002973027 -0.001713975 -0.002618298  0.016824551
> vcov( randEffNeg, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225705015 -0.020698415 -0.255083233  0.021181928  0.003024015
x1          -0.020698415  0.043806824  0.008690725 -0.011798840 -0.002936683
x2          -0.255083233  0.008690725  0.454589751 -0.015245308 -0.001693023
sigmaMu      0.021181928 -0.011798840 -0.015245308  0.051419160 -0.002273553
sigmaNu      0.003024015 -0.002936683 -0.001693023 -0.002273553  0.016415719
> logLik( randEffNeg )
'log Lik.' -73.1989 (df=5)
> extractAIC( randEffNeg )
[1] -40.0000 156.3978
> print.default( randEffNeg )
$maximum
[1] -73.1989

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.37098005 -1.68033241 -2.24863763 -0.12888106 -0.01229989 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-0.0092974947 -0.0007765181  0.0124559884 -0.0037541222 -0.0042957376 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.300076  -4.093641 -7.2983381   2.1390210   1.2861141
x1            -4.093641 -26.063167 -1.9876605  -4.4803203  -4.7604053
x2            -7.298338  -1.987660 -6.2311931   0.6352831   0.4408616
logSigmaMu     2.139021  -4.480320  0.6352831 -16.6879138  -3.7132447
logSigmaNu     1.286114  -4.760405  0.4408616  -3.7132447 -61.0451330

$code
[1] 3

$message
[1] "Last step could not find a value above the current.\nBoundary of parameter space?  \nConsider switching to a more robust optimisation method temporarily."

$last.step
$last.step$theta0
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.37089438 -1.68027134 -2.24851724 -0.12888642 -0.01201392 

$last.step$f0
[1] -73.1989
attr(,"gradient")
             [,1]        [,2]        [,3]       [,4]       [,5]
 [1,]  0.85133825 -0.22332992  0.07356893 -0.1449839 -0.9696417
 [2,]  1.70221236 -0.04664332  1.19028657  1.6814357 -1.0124359
 [3,] -1.74871321 -0.33349553 -1.72351599  1.8333871  1.7914512
 [4,] -0.15558016  0.20323055  0.43337852 -0.6889617 -1.4281954
 [5,] -0.12982890 -0.98248325 -0.68670801 -0.6768493 -0.5634945
 [6,] -0.33004538  0.30502022 -0.38352734 -0.4919905 -1.5836472
 [7,]  0.07948764  3.18379201  0.23657195 -0.6771945  6.0274180
 [8,]  0.26541714 -0.37771562 -0.05574470 -0.5390348 -1.1085840
 [9,] -1.14843286 -0.59342181 -0.30313478  0.1347926 -1.6154247
[10,]  0.43316304  0.40421259  0.15187986 -0.4701346 -1.9374017
[11,]  0.02768107 -1.44985736  0.64445857 -0.9183673  2.7399459
[12,] -1.20959500 -0.53835919 -0.61075623  0.2046005 -1.7337787
[13,] -0.53644672  0.22508132 -0.33103843 -0.3683602 -1.4092017
[14,]  1.81341951  1.30702287  0.91952245  1.9573313  2.5742997
[15,]  0.07699339 -1.08664656  0.45709135 -0.8407772  0.2066140

$last.step$climb
[1] -1471674.57  1049098.10  2068397.05   -92063.25  4913030.42


$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 78

$type
[1] "BFGSR maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,]  0.85164539 -0.22350243  0.07356150 -0.1448062 -0.9690481
 [2,]  1.70230042 -0.04661423  1.19042615  1.6817727 -1.0125545
 [3,] -1.74914121 -0.33281180 -1.72407556  1.8345432  1.7929134
 [4,] -0.15531302  0.20337203  0.43387399 -0.6890212 -1.4270211
 [5,] -0.12990350 -0.98258919 -0.68700055 -0.6769344 -0.5629365
 [6,] -0.32986343  0.30558417 -0.38354779 -0.4919021 -1.5827937
 [7,]  0.07939624  3.18586988  0.23669225 -0.6774014  6.0325158
 [8,]  0.26525888 -0.37761788 -0.05581356 -0.5392338 -1.1083158
 [9,] -1.14863618 -0.59355009 -0.30317125  0.1348500 -1.6151096
[10,]  0.43313177  0.40453873  0.15183788 -0.4700769 -1.9369692
[11,]  0.02757433 -1.45054928  0.64470064 -0.9187880  2.7429231
[12,] -1.20950877 -0.53848810 -0.61061863  0.2043218 -1.7330921
[13,] -0.53668746  0.22534971 -0.33118370 -0.3680618 -1.4086966
[14,]  1.81371185  1.30747680  0.91959877  1.9581198  2.5757774
[15,]  0.07673721 -1.08724482  0.45717586 -0.8411359  0.2081119

$call
censReg(formula = yNeg ~ x1 + x2, left = -Inf, right = 0, data = pData, 
    method = "BFGSR")

$terms
yNeg ~ x1 + x2
attr(,"variables")
list(yNeg, x1, x2)
attr(,"factors")
     x1 x2
yNeg  0  0
x1    1  0
x2    0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(yNeg, x1, x2)
attr(,"dataClasses")
     yNeg        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 -0.4703506  -1.0111600  -1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## right-censoring at -5
> pData$yAddNeg <- - pData$yAdd
> randEffAddNeg <- censReg( yAddNeg ~ x1 + x2, data = pData, method = "BFGSR",
+    left = -Inf, right = -5 )
> print( randEffAddNeg )

Call:
censReg(formula = yAddNeg ~ x1 + x2, left = -Inf, right = -5, 
    data = pData, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
   -4.63267    -1.68012    -2.24314    -0.12939    -0.01243 

> maxLik:::summary.maxLik( randEffAddNeg )
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 81 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -73.19883 
5  free parameters
Estimates:
             Estimate Std. error t value   Pr(> t)    
(Intercept) -4.632667   0.474635 -9.7605 < 2.2e-16 ***
x1          -1.680121   0.209239 -8.0297 9.772e-16 ***
x2          -2.243137   0.673963 -3.3283 0.0008738 ***
logSigmaMu  -0.129390   0.258032 -0.5014 0.6160549    
logSigmaNu  -0.012429   0.129690 -0.0958 0.9236486    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffAddNeg )

Call:
censReg(formula = yAddNeg ~ x1 + x2, left = -Inf, right = -5, 
    data = pData, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept) -4.63267    0.47464  -9.760  < 2e-16 ***
x1          -1.68012    0.20924  -8.030 9.77e-16 ***
x2          -2.24314    0.67396  -3.328 0.000874 ***
logSigmaMu  -0.12939    0.25803  -0.501 0.616055    
logSigmaNu  -0.01243    0.12969  -0.096 0.923649    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 81 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -73.19883 on 5 Df

> coef( randEffAddNeg )
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-4.63266699 -1.68012127 -2.24313701 -0.12939018 -0.01242936 
> coef( randEffAddNeg, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
 -4.6326670  -1.6801213  -2.2431370   0.8786311   0.9876476 
> vcov( randEffAddNeg )
             (Intercept)           x1           x2   logSigmaMu   logSigmaNu
(Intercept)  0.225278485 -0.020610818 -0.254732319  0.023913228  0.003000712
x1          -0.020610818  0.043780850  0.008603793 -0.013409716 -0.002970852
x2          -0.254732319  0.008603793  0.454226041 -0.017232631 -0.001571504
logSigmaMu   0.023913228 -0.013409716 -0.017232631  0.066580699 -0.002633706
logSigmaNu   0.003000712 -0.002970852 -0.001571504 -0.002633706  0.016819544
> vcov( randEffAddNeg, logSigma = FALSE )
             (Intercept)           x1           x2      sigmaMu      sigmaNu
(Intercept)  0.225278485 -0.020610818 -0.254732319  0.021010905  0.002963646
x1          -0.020610818  0.043780850  0.008603793 -0.011782194 -0.002934154
x2          -0.254732319  0.008603793  0.454226041 -0.015141125 -0.001552092
sigmaMu      0.021010905 -0.011782194 -0.015141125  0.051399805 -0.002285471
sigmaNu      0.002963646 -0.002934154 -0.001552092 -0.002285471  0.016406586
> logLik( randEffAddNeg )
'log Lik.' -73.19883 (df=5)
> extractAIC( randEffAddNeg )
[1] -40.0000 156.3977
> print.default( randEffAddNeg )
$maximum
[1] -73.19883

$estimate
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
-4.63266699 -1.68012127 -2.24313701 -0.12939018 -0.01242936 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-3.042634e-03  6.125826e-04  3.999178e-03 -1.803906e-05  2.276191e-03 

$hessian
            (Intercept)         x1         x2  logSigmaMu  logSigmaNu
(Intercept)  -13.316710  -4.096270 -7.3056168   2.1184546   1.3013900
x1            -4.096270 -26.074957 -1.9898951  -4.4838502  -4.7628741
x2            -7.305617  -1.989895 -6.2354498   0.6277379   0.4675877
logSigmaMu     2.118455  -4.483850  0.6277379 -16.6680343  -3.7212620
logSigmaNu     1.301390  -4.762874  0.4675877  -3.7212619 -61.0670997

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 81

$type
[1] "BFGSR maximization"

$gradientObs
      (Intercept)          x1          x2 logSigmaMu logSigmaNu
 [1,]  0.85274190 -0.22490182  0.07294037 -0.1442055 -0.9633672
 [2,]  1.70300582 -0.04774679  1.19018947  1.6812905 -1.0130462
 [3,] -1.75055810 -0.33334649 -1.72666312  1.8354601  1.8012418
 [4,] -0.15565192  0.20274123  0.43281411 -0.6890615 -1.4323426
 [5,] -0.12966400 -0.98379743 -0.68873088 -0.6769748 -0.5570132
 [6,] -0.33023765  0.30817831 -0.38438951 -0.4920448 -1.5802630
 [7,]  0.08125222  3.18583409  0.23709716 -0.6768772  6.0298426
 [8,]  0.26633509 -0.37846973 -0.05570895 -0.5387944 -1.1088457
 [9,] -1.14846948 -0.59383175 -0.30327908  0.1336694 -1.6165311
[10,]  0.43450542  0.40591419  0.15228844 -0.4691433 -1.9365546
[11,]  0.02813143 -1.44890002  0.64432916 -0.9177529  2.7380035
[12,] -1.21023804 -0.53730919 -0.61246312  0.2052565 -1.7343985
[13,] -0.53626355  0.22534575 -0.33123251 -0.3687333 -1.4082733
[14,]  1.81452100  1.30681407  0.91965461  1.9578377  2.5801329
[15,]  0.07754722 -1.08591183  0.45715303 -0.8399445  0.2036908

$call
censReg(formula = yAddNeg ~ x1 + x2, left = -Inf, right = -5, 
    data = pData, method = "BFGSR")

$terms
yAddNeg ~ x1 + x2
attr(,"variables")
list(yAddNeg, x1, x2)
attr(,"factors")
        x1 x2
yAddNeg  0  0
x1       1  0
x2       0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(yAddNeg, x1, x2)
attr(,"dataClasses")
  yAddNeg        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60              0             40             20 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 -5.4703506  -1.0111600  -1.6191826  -0.4962510  -0.0620962 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## both right and left censoring
> pData$yBoth <- ifelse( pData$y < 3, pData$y, 3 )
> randEffBoth <- censReg( yBoth ~ x1 + x2, data = pData, method = "BFGSR",
+    left = 0, right = 3 )
> print( randEffBoth )

Call:
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  -0.232106    1.892758    1.967098    0.001281    0.052614 

> maxLik:::summary.maxLik( randEffBoth )
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 92 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -64.31275 
5  free parameters
Estimates:
              Estimate Std. error t value   Pr(> t)    
(Intercept) -0.2321057  0.5480078 -0.4235   0.67190    
x1           1.8927578  0.3009569  6.2891 3.192e-10 ***
x2           1.9670980  0.8183999  2.4036   0.01623 *  
logSigmaMu   0.0012815  0.2778628  0.0046   0.99632    
logSigmaNu   0.0526143  0.1629766  0.3228   0.74682    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBoth )

Call:
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             28             12 

Coefficients:
             Estimate Std. error t value  Pr(> t)    
(Intercept) -0.232106   0.548008  -0.424   0.6719    
x1           1.892758   0.300957   6.289 3.19e-10 ***
x2           1.967098   0.818400   2.404   0.0162 *  
logSigmaMu   0.001281   0.277863   0.005   0.9963    
logSigmaNu   0.052614   0.162977   0.323   0.7468    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 92 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -64.31275 on 5 Df

> print( summary( randEffBoth ), logSigma = FALSE )

Call:
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            60             20             28             12 

Coefficients:
            Estimate Std. error t value  Pr(> t)    
(Intercept)  -0.2321     0.5480  -0.424  0.67190    
x1            1.8928     0.3010   6.289 3.19e-10 ***
x2            1.9671     0.8184   2.404  0.01623 *  
sigmaMu       1.0013     0.2782   3.599  0.00032 ***
sigmaNu       1.0540     0.1718   6.136 8.47e-10 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 92 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -64.31275 on 5 Df

> coef( randEffBoth )
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.232105724  1.892757805  1.967097990  0.001281487  0.052614323 
> coef( randEffBoth, logSigma = FALSE )
(Intercept)          x1          x2     sigmaMu     sigmaNu 
 -0.2321057   1.8927578   1.9670980   1.0012823   1.0540231 
> vcov( randEffBoth )
            (Intercept)          x1          x2  logSigmaMu  logSigmaNu
(Intercept)  0.30031260 -0.03128493 -0.36363111 -0.01585204 -0.01631954
x1          -0.03128493  0.09057509  0.03165173  0.03516212  0.01590006
x2          -0.36363111  0.03165173  0.66977834  0.01852480  0.02438709
logSigmaMu  -0.01585204  0.03516212  0.01852480  0.07720775  0.00432165
logSigmaNu  -0.01631954  0.01590006  0.02438709  0.00432165  0.02656136
> vcov( randEffBoth, logSigma = FALSE )
            (Intercept)          x1          x2     sigmaMu     sigmaNu
(Intercept)  0.30031260 -0.03128493 -0.36363111 -0.01587237 -0.01720117
x1          -0.03128493  0.09057509  0.03165173  0.03520720  0.01675903
x2          -0.36363111  0.03165173  0.66977834  0.01854856  0.02570455
sigmaMu     -0.01587237  0.03520720  0.01854856  0.07740589  0.00456096
sigmaNu     -0.01720117  0.01675903  0.02570455  0.00456096  0.02950873
> coef( summary( randEffBoth ) )
                Estimate Std. error     t value      Pr(> t)
(Intercept) -0.232105724  0.5480078 -0.42354453 6.718980e-01
x1           1.892757805  0.3009569  6.28913141 3.192472e-10
x2           1.967097990  0.8183999  2.40359031 1.623496e-02
logSigmaMu   0.001281487  0.2778628  0.00461194 9.963202e-01
logSigmaNu   0.052614323  0.1629766  0.32283368 7.468212e-01
> coef( summary( randEffBoth ), logSigma = FALSE )
              Estimate Std. error    t value      Pr(> t)
(Intercept) -0.2321057  0.5480078 -0.4235445 6.718980e-01
x1           1.8927578  0.3009569  6.2891314 3.192472e-10
x2           1.9670980  0.8183999  2.4035903 1.623496e-02
sigmaMu      1.0012823  0.2782191  3.5988981 3.195684e-04
sigmaNu      1.0540231  0.1717811  6.1358517 8.470417e-10
> logLik( randEffBoth )
'log Lik.' -64.31275 (df=5)
> extractAIC( randEffBoth )
[1] -40.0000 138.6255
> print.default( randEffBoth )
$maximum
[1] -64.31275

$estimate
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.232105724  1.892757805  1.967097990  0.001281487  0.052614323 

$gradient
  (Intercept)            x1            x2    logSigmaMu    logSigmaNu 
-0.0053715645  0.0008262946  0.0046834625  0.0037129728  0.0015245305 

$hessian
            (Intercept)          x1         x2   logSigmaMu  logSigmaNu
(Intercept) -9.93702410  -1.4931274 -5.3106798  -0.06785015  -0.3245903
x1          -1.49312743 -15.1488356 -0.5466579   6.29672056   7.6283554
x2          -5.31067981  -0.5466579 -4.3937449   0.15270876   1.0735429
logSigmaMu  -0.06785015   6.2967206  0.1527088 -15.79296804  -1.3816307
logSigmaNu  -0.32459028   7.6283554  1.0735429  -1.38163070 -43.1754322

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 92

$type
[1] "BFGSR maximization"

$gradientObs
      (Intercept)          x1          x2  logSigmaMu logSigmaNu
 [1,] -0.85455905 -0.10576943 -0.18131820 -0.02323349 -0.8360315
 [2,] -1.41701994 -0.02603192 -0.97174048  1.45618556 -1.1647458
 [3,]  1.29779642  1.02180429  0.92592927  1.09207057  0.1543667
 [4,]  0.07097244 -0.25161463 -0.39788695 -0.70165251 -1.8283207
 [5,]  0.08902224  0.80813687  0.64824711 -0.69074182 -0.2828163
 [6,]  0.55957376  0.49473670  0.42925739 -0.29131953 -0.3595637
 [7,] -0.12103595 -3.06154529 -0.23684906 -0.70593761  6.3413595
 [8,] -0.21013428  0.33596084  0.08321678 -0.59042084 -1.0297982
 [9,]  1.03430711  0.66089245  0.28835293  0.19642530 -1.2972781
[10,] -0.42867600 -0.58574528 -0.11748307 -0.39555238 -1.8007068
[11,] -0.04100022  1.09466077 -0.50823778 -0.86625193  2.0007097
[12,]  1.14078560  0.50510073  0.83290041  0.58578304 -0.7446490
[13,]  0.53439849 -0.28152853  0.34775826 -0.28706882 -1.4337271
[14,] -1.63842360 -1.34705131 -0.83801731  2.11947565  2.7651805
[15,] -0.02137859  0.73882004 -0.29944586 -0.89404821 -0.4824548

$call
censReg(formula = yBoth ~ x1 + x2, left = 0, right = 3, data = pData, 
    method = "BFGSR")

$terms
yBoth ~ x1 + x2
attr(,"variables")
list(yBoth, x1, x2)
attr(,"factors")
      x1 x2
yBoth  0  0
x1     1  0
x2     0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(yBoth, x1, x2)
attr(,"dataClasses")
    yBoth        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            60             20             28             12 

$df.residual
[1] 55

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  0.6056357   0.8113032   1.0023997  -0.7545646  -0.2748137 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## re-order observations/individuals
> set.seed( 234 )
> perm <- sample( nId )
> nData2 <- nData
> nData2$id <- NA
> for( i in 1:nId ) {
+    nData2$id[ nData$id == paste( "F", i, sep = "_" ) ] <-
+       paste( "G", perm[ i ], sep = "_" )
+ }
> pData2 <- pdata.frame( nData2, c( "id", "time" ) )
> randEffBfgsr2 <- censReg( y ~ x1 + x2, data = pData2, method = "BFGSR" )
> all.equal( randEffBfgsr2[ -c(11,12) ], randEffBfgsr[ -c(11,12) ] )
 [1] "Component 1: Mean relative difference: 1.408588e-07"           
 [2] "Component 2: Mean relative difference: 0.001131485"            
 [3] "Component 3: Mean relative difference: 11.47305"               
 [4] "Component 4: Mean relative difference: 0.0007716773"           
 [5] "Component 5: Mean relative difference: 0.3333333"              
 [6] "Component 6: 1 string mismatch"                                
 [7] "Component 7: Modes: list, NULL"                                
 [8] "Component 7: names for target but not for current"             
 [9] "Component 7: Length mismatch: comparison on first 0 components"
[10] "Component 9: Mean relative difference: 0.2307692"              
> all.equal( sort( randEffBfgsr2[[ 11 ]] ), sort( randEffBfgsr[[ 11 ]] ) )
[1] "Mean relative difference: 0.0007561669"
> 
> # check if the order of observations/individuals influences the likelihood values
> d1c1 <- censReg( y ~ x1 + x2, data = pData, method = "BFGSR", start = coef(randEffBfgsr),
+    iterlim = 0 )
> all.equal( d1c1[-c(5,6,9,12,16)], randEffBfgsr[-c(5,6,9,12,16)] )
[1] TRUE
> d1c1$maximum -  randEffBfgsr$maximum
[1] 0
> 
> d2c2 <- censReg( y ~ x1 + x2, data = pData2, method = "BFGSR", start = coef(randEffBfgsr2),
+    iterlim = 0 )
> all.equal( d2c2[-c(5,6,9,12,16)], randEffBfgsr2[-c(5,6,9,12,16)] )
[1] "Component 5: target is NULL, current is list"
> d2c2$maximum -  randEffBfgsr2$maximum
[1] 0
> 
> d1c2 <- censReg( y ~ x1 + x2, data = pData, method = "BFGSR", 
+    start = coef(randEffBfgsr2), iterlim = 0 )
> d2c2$maximum - d1c2$maximum
[1] 0
> d2c2$gradient - d1c2$gradient
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
          0           0           0           0           0 
> 
> d2c1 <- censReg( y ~ x1 + x2, data = pData2, method = "BFGSR", 
+    start = coef(randEffBfgsr), iterlim = 0 )
> d1c1$maximum - d2c1$maximum
[1] 0
> d1c1$gradient - d2c1$gradient
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
          0           0           0           0           0 
> 
> d2c2$maximum - d2c1$maximum
[1] 1.03107e-05
> d1c1$maximum - d1c2$maximum
[1] -1.03107e-05
> 
> d1cS <- censReg( y ~ x1 + x2, data = pData, method = "BFGSR", 
+    start = randEffBfgsr$start, iterlim = 0 )
> d2cS <- censReg( y ~ x1 + x2, data = pData2, method = "BFGSR", 
+    start = randEffBfgsr$start, iterlim = 0 )
> d1cS$maximum - d2cS$maximum
[1] 0
> d1cS$gradient - d2cS$gradient
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
          0           0           0           0           0 
> 
> 
> ## unbalanced panel data
> nDataUnb <- nData[ -c( 2, 5, 6, 8 ), ]
> pDataUnb <- pdata.frame( nDataUnb, c( "id", "time" ) )
> randEffBfgsrUnb <- censReg( y ~ x1 + x2, data = pDataUnb, method = "BFGSR" )
> print( randEffBfgsrUnb )

Call:
censReg(formula = y ~ x1 + x2, data = pDataUnb, method = "BFGSR")

Coefficients:
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
  -0.220667    1.640470    2.104916   -0.167440   -0.001131 

> maxLik:::summary.maxLik( randEffBfgsrUnb )
--------------------------------------------
Maximum Likelihood estimation
BFGSR maximization, 71 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -71.19261 
5  free parameters
Estimates:
              Estimate Std. error t value   Pr(> t)    
(Intercept) -0.2206666  0.4723740 -0.4671  0.640397    
x1           1.6404698  0.2110335  7.7735 7.635e-15 ***
x2           2.1049164  0.6847911  3.0738  0.002113 ** 
logSigmaMu  -0.1674398  0.2715589 -0.6166  0.537507    
logSigmaNu  -0.0011313  0.1322792 -0.0086  0.993176    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> summary( randEffBfgsrUnb )

Call:
censReg(formula = y ~ x1 + x2, data = pDataUnb, method = "BFGSR")

Observations:
         Total  Left-censored     Uncensored Right-censored 
            56             17             39              0 

Coefficients:
             Estimate Std. error t value  Pr(> t)    
(Intercept) -0.220667   0.472374  -0.467  0.64040    
x1           1.640470   0.211034   7.774 7.63e-15 ***
x2           2.104916   0.684791   3.074  0.00211 ** 
logSigmaMu  -0.167440   0.271559  -0.617  0.53751    
logSigmaNu  -0.001131   0.132279  -0.009  0.99318    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 

BFGSR maximization, 71 iterations
Return code 2: successive function values within tolerance limit
Log-likelihood: -71.19261 on 5 Df

> logLik( randEffBfgsrUnb )
'log Lik.' -71.19261 (df=5)
> extractAIC( randEffBfgsrUnb )
[1] -36.0000 152.3852
> print.default( randEffBfgsrUnb )
$maximum
[1] -71.19261

$estimate
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.220666640  1.640469791  2.104916416 -0.167439817 -0.001131289 

$gradient
 (Intercept)           x1           x2   logSigmaMu   logSigmaNu 
-0.006342737 -0.002279751  0.011885665 -0.002466810 -0.001086707 

$hessian
            (Intercept)         x1         x2  logSigmaMu logSigmaNu
(Intercept)  -13.794768  -4.346728 -7.5296905  -1.1009295  -1.947040
x1            -4.346728 -25.814655 -2.0582864   4.6517665   4.058406
x2            -7.529691  -2.058286 -6.2664876  -0.1404608  -1.076070
logSigmaMu    -1.100929   4.651767 -0.1404608 -14.9204049  -3.775386
logSigmaNu    -1.947040   4.058406 -1.0760701  -3.7753863 -58.833285

$code
[1] 2

$message
[1] "successive function values within tolerance limit"

$last.step
NULL

$fixed
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
      FALSE       FALSE       FALSE       FALSE       FALSE 

$iterations
[1] 71

$type
[1] "BFGSR maximization"

$gradientObs
      (Intercept)           x1          x2  logSigmaMu  logSigmaNu
 [1,] -0.50880343  0.089749180  0.10399119 -0.39402963 -0.52865885
 [2,] -1.81665885  0.067830431 -1.24649313  1.79736884 -0.96200181
 [3,]  1.78449095  0.484476786  1.77057923  1.73311219  1.89957458
 [4,]  0.15191216 -0.162386056 -0.39546986 -0.73686806 -1.58894821
 [5,]  0.08153063  1.039439207  0.69892380 -0.67817673 -0.44298309
 [6,]  0.33244936 -0.234417141  0.37418823 -0.53973690 -1.57248883
 [7,] -0.18153908 -3.029381566 -0.24874391 -0.62192313  5.47976688
 [8,]  0.01867616 -0.004070934  0.01068156 -0.41770725 -0.58169483
 [9,]  1.11536323  0.666442506  0.29564324  0.06267183 -1.68668274
[10,] -0.53825823 -0.420933442 -0.20431279 -0.40611922 -1.97398463
[11,] -0.08349140  1.377396463 -0.64736485 -0.82283932  2.49231821
[12,]  1.25897920  0.530909559  0.67042565  0.23076312 -1.79436990
[13,]  0.44649076 -0.163442714  0.28643797 -0.46838765 -1.45027367
[14,] -1.89252489 -1.285847948 -0.96170382  1.98276432  2.68327136
[15,] -0.17495931  1.041955919 -0.49489683 -0.72335920  0.02606883

$call
censReg(formula = y ~ x1 + x2, data = pDataUnb, method = "BFGSR")

$terms
y ~ x1 + x2
attr(,"variables")
list(y, x1, x2)
attr(,"factors")
   x1 x2
y   0  0
x1  1  0
x2  0  1
attr(,"term.labels")
[1] "x1" "x2"
attr(,"order")
[1] 1 1
attr(,"intercept")
[1] 1
attr(,"response")
[1] 1
attr(,".Environment")
<environment: R_GlobalEnv>
attr(,"predvars")
list(y, x1, x2)
attr(,"dataClasses")
        y        x1        x2 
"numeric" "numeric" "numeric" 

$nObs
         Total  Left-censored     Uncensored Right-censored 
            56             17             39              0 

$df.residual
[1] 51

$start
(Intercept)          x1          x2  logSigmaMu  logSigmaNu 
 0.48299720  1.03002625  1.63470549 -0.47772116 -0.04988945 

attr(,"class")
[1] "censReg" "maxLik"  "maxim"   "list"   
> 
> 
> ## NAs in data
> pDataNa <- pData
> obsNa <- which( ! rownames( pData ) %in% rownames( pDataUnb ) )
> pDataNa$y[ obsNa[ 1:2 ] ] <- NA
> pDataNa$x1[ obsNa[ 3 ] ] <- NA
> pDataNa$x2[ obsNa[ c( 1, 2, 4 ) ] ] <- NA
> randEffBfgsrNa <- censReg( y ~ x1 + x2, data = pDataNa, method = "BFGSR" )
> all.equal( randEffBfgsrNa[ -12 ], randEffBfgsrUnb[ -12 ] )
[1] TRUE
> 
> 
> # returning log-likelihood contributions only (no estimations)
> logLikRandEff <- censReg( y ~ x1 + x2, data = pData, start = coef( randEff ),
+    logLikOnly = TRUE )
> print( logLikRandEff )
 [1] -4.252049 -3.739068 -7.046358 -5.300447 -3.354337 -5.307797 -6.291576
 [8] -1.655650 -4.393946 -3.765898 -6.821870 -5.646158 -4.333350 -5.726405
[15] -5.563914
attr(,"gradient")
             [,1]        [,2]        [,3]       [,4]       [,5]
 [1,] -0.85308353  0.22558520 -0.07261010 -0.1440032 -0.9609402
 [2,] -1.70309357  0.04839424 -1.18987552  1.6807831 -1.0133141
 [3,]  1.75084247  0.33367482  1.72755770  1.8353812  1.8043727
 [4,]  0.15577733 -0.20240007 -0.43224660 -0.6891081 -1.4351382
 [5,]  0.12950026  0.98433620  0.68943625 -0.6770204 -0.5543803
 [6,]  0.33035909 -0.30928416  0.38471147 -0.4921375 -1.5793716
 [7,] -0.08212549 -3.18521871 -0.23724729 -0.6766315  6.0271932
 [8,] -0.26685300  0.37888544  0.05565473 -0.5385828 -1.1091111
 [9,]  1.14824183  0.59396387  0.30328556  0.1329802 -1.6172740
[10,] -0.43505392 -0.40640593 -0.15245982 -0.4687582 -1.9364984
[11,] -0.02839185  1.44795739 -0.64407731 -0.9172655  2.7349924
[12,]  1.21047881  0.53669833  0.61328528  0.2055542 -1.7351236
[13,]  0.53592707 -0.22523044  0.33117482 -0.3691166 -1.4082834
[14,] -1.81460674 -1.30608969 -0.91950989  1.9573174  2.5815580
[15,] -0.07791875  1.08513351 -0.45707928 -0.8393922  0.2013187
> all.equal( sum( logLikRandEff ), c( logLik( randEff ) ) )
[1] TRUE
> logLikStart <- censReg( y ~ x1 + x2, data = pData, 
+    start = c( -0.4, 1.7, 2.2, -0.1, -0.01 ), logLikOnly = TRUE )
> print( logLikStart )
 [1] -4.223693 -3.590625 -7.110342 -5.316228 -3.389378 -5.360380 -6.349353
 [8] -1.661668 -4.433769 -3.774324 -6.788058 -5.699416 -4.385225 -5.593147
[15] -5.548283
attr(,"gradient")
             [,1]        [,2]        [,3]       [,4]       [,5]
 [1,] -0.78780430  0.27899526 -0.03948865 -0.1781187 -1.0281108
 [2,] -1.58232641  0.09231159 -1.09619445  1.4850210 -1.0562683
 [3,]  1.72436737  0.26392132  1.72228285  1.9089216  1.8439353
 [4,]  0.18480626 -0.20993642 -0.40681657 -0.6139118 -1.5330720
 [5,]  0.16156500  0.97006006  0.71388764 -0.6642389 -0.5115526
 [6,]  0.36176010 -0.38785781  0.42046000 -0.4277169 -1.5829540
 [7,] -0.04900991 -3.19667670 -0.23065229 -0.6996566  6.1344398
 [8,] -0.21856969  0.35678338  0.07820116 -0.5684845 -1.0658263
 [9,]  1.13458709  0.55150636  0.30101863  0.1460472 -1.6130954
[10,] -0.35438475 -0.38788784 -0.10704963 -0.5248618 -1.9100687
[11,] -0.01373800  1.42364787 -0.62446618 -0.9654173  2.6815112
[12,]  1.16280483  0.49951850  0.60156788  0.2025718 -1.7537215
[13,]  0.59996890 -0.26781383  0.36925229 -0.2994739 -1.3806520
[14,] -1.71185020 -1.20078722 -0.84865925  1.8183688  2.4960866
[15,] -0.03387939  1.05747706 -0.42268903 -0.9163573  0.1985986
> 
> 
> 
> 
