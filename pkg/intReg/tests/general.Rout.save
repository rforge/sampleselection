
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### A general test suite intended to be added to CRAN
> ### Test general behavior, do not go into depth.
> ### 
> ### Note: there are far more thorough tests on the intReg R-forge page.
> ###
> ### Tests here:
> ### 1) mixed model with observation-sepcific boundaries and point obs,
> ###    normal disturbances.
> ###   * calculate
> ###   * coef
> ###   * stdEr
> ###   * summary
> ###   * model.matrix
> ###   * model.frame
> ###   * model.response
> ###   * boundaries
> ###   * disturbances
> ###   * intervals
> ###   * intervalObs
> ###
> ### 2) common boundaries, interval obs, normal disturbances
> ###   * summary
> ###   * boundaries
> ###   * intervals
> ###
> ### 3) predictions (using common boundaries above)
> ###   * link
> ###   * conditional mean
> ###
> ### 4) test narrow interval observations.  Note: this may differ on different
> ###    machines, hence should stay on CRAN
> ###   * width 1e-7 -> should work fine
> ###   * width 1e-8 -> should give convergence problems
> ###
> ### 5) Simple model width logistic disturbances
> ###   * summary
> ###   * disturbances
> 
> ## Observation-specific boundaries
> ## Estimate the willingness to pay for the Kakadu National Park
> ## Data given in intervals -- 'lower' for lower bound and 'upper' for upper bound.
> ## Note that dichotomous-coice answers are already coded to 'lower' and 'upper'
> set.seed(1)
> options(digits=4)
> library(intReg)
Loading required package: miscTools
Loading required package: maxLik

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> data(Kakadu, package="Ecdat")
> ## Estimate in log form, change 999 to Inf
> Kakadu <- Kakadu[sample(nrow(Kakadu), 100),]
>                            # Speed up the tests
> lb <- log(Kakadu$lower)
> ub <- Kakadu$upper
> ub[ub > 998] <- Inf
> ub <- log(ub)
> ## Artifically create a few point observations
> iP <- sample(nrow(Kakadu), 15)
> iP <- iP[!is.infinite(lb[iP])]
> ub[iP] <- lb[iP]
> y <- cbind(lb, ub)
> m <- intReg(y ~ sex + log(income),
+             data=Kakadu)
> ## You may want to compare the results to Werner (1999),
> ## Journal of Business and Economics Statistics 17(4), pp 479-486
> 
> ## Test coef, stdEr, summary with and without boundaries
> cat("Coefficients:\n")
Coefficients:
> print(coef(m))
(Intercept)     sexmale log(income)       sigma 
     3.6938     -1.0659      0.3542      2.7361 
> cat("Coefficients, with boundaries:\n")
Coefficients, with boundaries:
> print(coef(m, boundaries=TRUE))
(Intercept)     sexmale log(income)         L 1         U 1         L 2 
     3.6938     -1.0659      0.3542        -Inf      0.6931        -Inf 
        U 2         L 3         U 3         L 4         U 4         L 5 
     1.6094        -Inf      2.9957        -Inf      3.9120      1.6094 
        U 5         L 6         U 6         L 7         U 7         L 8 
     1.6094      1.6094      2.9957      2.9957      2.9957      2.9957 
        U 8         L 9         U 9        L 10        U 10        L 11 
     3.9120      2.9957         Inf      3.9120      3.9120      3.9120 
       U 11        L 12        U 12        L 13        U 13        L 14 
     4.6052      3.9120         Inf      4.6052      4.6052      4.6052 
       U 14        L 15        U 15        L 16        U 16        L 17 
     5.5215      4.6052         Inf      5.5215      5.5215      5.5215 
       U 17       sigma 
        Inf      2.7361 
> cat("stdEr:\n")
stdEr:
> print(stdEr(m))
(Intercept)     sexmale log(income)       sigma 
     1.1475      0.7294      0.4191      0.4427 
attr(,"class")
[1] "stdEr.intReg" "numeric"     
> cat("stdEr, with boundaries:\n")
stdEr, with boundaries:
> print(stdEr(m, boundaries=TRUE))
(Intercept)     sexmale log(income)         L 1         U 1         L 2 
     1.1475      0.7294      0.4191      0.0000      0.0000      0.0000 
        U 2         L 3         U 3         L 4         U 4         L 5 
     0.0000      0.0000      0.0000      0.0000      0.0000      0.0000 
        U 5         L 6         U 6         L 7         U 7         L 8 
     0.0000      0.0000      0.0000      0.0000      0.0000      0.0000 
        U 8         L 9         U 9        L 10        U 10        L 11 
     0.0000      0.0000      0.0000      0.0000      0.0000      0.0000 
       U 11        L 12        U 12        L 13        U 13        L 14 
     0.0000      0.0000      0.0000      0.0000      0.0000      0.0000 
       U 14        L 15        U 15        L 16        U 16        L 17 
     0.0000      0.0000      0.0000      0.0000      0.0000      0.0000 
       U 17       sigma 
     0.0000      0.4427 
attr(,"class")
[1] "stdEr.intReg" "numeric"     
> cat("Summary:\n")
Summary:
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 12 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -113.1 
100 observations, 4 free parameters (df = 96)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)    3.694      1.147    3.22   0.0018 ** 
sexmale       -1.066      0.729   -1.46   0.1472    
log(income)    0.354      0.419    0.85   0.4002    
sigma          2.736      0.443    6.18  1.5e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> cat("Summary, with boundaries:\n")
Summary, with boundaries:
> print(summary(m, boundaries=TRUE))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 12 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -113.1 
100 observations, 4 free parameters (df = 96)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)    3.694      1.147    3.22   0.0018 ** 
sexmale       -1.066      0.729   -1.46   0.1472    
log(income)    0.354      0.419    0.85   0.4002    
L 1             -Inf      0.000    -Inf  < 2e-16 ***
U 1            0.693      0.000     Inf  < 2e-16 ***
L 2             -Inf      0.000    -Inf  < 2e-16 ***
U 2            1.609      0.000     Inf  < 2e-16 ***
L 3             -Inf      0.000    -Inf  < 2e-16 ***
U 3            2.996      0.000     Inf  < 2e-16 ***
L 4             -Inf      0.000    -Inf  < 2e-16 ***
U 4            3.912      0.000     Inf  < 2e-16 ***
L 5            1.609      0.000     Inf  < 2e-16 ***
U 5            1.609      0.000     Inf  < 2e-16 ***
L 6            1.609      0.000     Inf  < 2e-16 ***
U 6            2.996      0.000     Inf  < 2e-16 ***
L 7            2.996      0.000     Inf  < 2e-16 ***
U 7            2.996      0.000     Inf  < 2e-16 ***
L 8            2.996      0.000     Inf  < 2e-16 ***
U 8            3.912      0.000     Inf  < 2e-16 ***
L 9            2.996      0.000     Inf  < 2e-16 ***
U 9              Inf      0.000     Inf  < 2e-16 ***
L 10           3.912      0.000     Inf  < 2e-16 ***
U 10           3.912      0.000     Inf  < 2e-16 ***
L 11           3.912      0.000     Inf  < 2e-16 ***
U 11           4.605      0.000     Inf  < 2e-16 ***
L 12           3.912      0.000     Inf  < 2e-16 ***
U 12             Inf      0.000     Inf  < 2e-16 ***
L 13           4.605      0.000     Inf  < 2e-16 ***
U 13           4.605      0.000     Inf  < 2e-16 ***
L 14           4.605      0.000     Inf  < 2e-16 ***
U 14           5.521      0.000     Inf  < 2e-16 ***
L 15           4.605      0.000     Inf  < 2e-16 ***
U 15             Inf      0.000     Inf  < 2e-16 ***
L 16           5.521      0.000     Inf  < 2e-16 ***
U 16           5.521      0.000     Inf  < 2e-16 ***
L 17           5.521      0.000     Inf  < 2e-16 ***
U 17             Inf      0.000     Inf  < 2e-16 ***
sigma          2.736      0.443    6.18  1.5e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## test model.matrix
> mm <- model.matrix(m)
> cat("Model matrix (sample):\n")
Model matrix (sample):
> print(mm[1:10,])
     (Intercept) sexmale log(income)
486            1       1       3.555
680            1       0       1.099
1046           1       0       2.197
1657           1       0       3.296
368            1       1       3.555
1637           1       0       2.197
1721           1       1       2.773
1203           1       0       3.219
1145           1       1       4.094
113            1       1       3.219
> ## Test model.frame
> mf <- model.frame(m)
> cat("Model matrix (sample):\n")
Model matrix (sample):
> print(mf[1:10,])
       y.lb   y.ub    sex log(income)
486  1.6094 2.9957   male       3.555
680  2.9957    Inf female       1.099
1046 2.9957 3.9120 female       2.197
1657 4.6052 5.5215 female       3.296
368    -Inf 2.9957   male       3.555
1637 4.6052 5.5215 female       2.197
1721 5.5215    Inf   male       2.773
1203 3.9120    Inf female       3.219
1145 3.9120    Inf   male       4.094
113    -Inf 0.6931   male       3.219
> cat("Model response (sample):\n")
Model response (sample):
> print(model.response(mf)[1:10])
 [1] 1.609 2.996 2.996 4.605  -Inf 4.605 5.521 3.912 3.912  -Inf
> 
> ## test utility functions
> cat("Boundaries:\n")
Boundaries:
> print(boundaries(m))
   L 1    U 1    L 2    U 2    L 3    U 3    L 4    U 4    L 5    U 5    L 6 
  -Inf 0.6931   -Inf 1.6094   -Inf 2.9957   -Inf 3.9120 1.6094 1.6094 1.6094 
   U 6    L 7    U 7    L 8    U 8    L 9    U 9   L 10   U 10   L 11   U 11 
2.9957 2.9957 2.9957 2.9957 3.9120 2.9957    Inf 3.9120 3.9120 3.9120 4.6052 
  L 12   U 12   L 13   U 13   L 14   U 14   L 15   U 15   L 16   U 16   L 17 
3.9120    Inf 4.6052 4.6052 4.6052 5.5215 4.6052    Inf 5.5215 5.5215 5.5215 
  U 17 
   Inf 
> cat("Disturbances:\n")
Disturbances:
> print(disturbances(m))
[1] "probit"
> cat("Intervals (sample):\n")
Intervals (sample):
> print(intervals(m)[sample(seq(nObs(m)), 10),])
        lb     ub
680  2.996    Inf
596  2.996    Inf
375   -Inf 2.9957
987   -Inf 3.9120
519  2.996    Inf
1350 3.912    Inf
42    -Inf 0.6931
1407 3.912 4.6052
902   -Inf 3.9120
149   -Inf 1.6094
> cat("intervalObs:\n")
intervalObs:
> print(intervalObs(m))
  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [13] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE
 [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [37]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [49]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [61] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
 [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [97] FALSE  TRUE  TRUE FALSE
> 
> ##
> ## Example of common intervals for all the observations
> ##
> cat("Common intervals example:\n")
Common intervals example:
> data(Bwages, package="Ecdat")
> Bwages <- Bwages[sample(nrow(Bwages), 200),]
> ## calculate an ordinary Mincer-style wage regression.  
> ## Note: gross hourly wage rate in EUR
> intBound <- c(0, 5, 10, 15, 25, Inf)
> salary <- cut(Bwages$wage, intBound)
> m <- intReg(salary ~ factor(educ) + poly(exper, 2), data=Bwages,
+             boundaries=log(intBound))
> ## Note: use logs for the intervals in Euros.  We do not have to
> ## transform salaris to log form as this does not change the intervals.
> ## Ignore any warnings
> cat("Summary, common boundaries:\n")
Summary, common boundaries:
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 16 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -169.9 
200 observations, 8 free parameters (df = 192)
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)       1.9081     0.1839   10.38  < 2e-16 ***
factor(educ)2     0.2218     0.1878    1.18  0.23910    
factor(educ)3     0.3964     0.1847    2.15  0.03313 *  
factor(educ)4     0.4904     0.1934    2.54  0.01203 *  
factor(educ)5     0.7075     0.1881    3.76  0.00022 ***
poly(exper, 2)1   2.0166     0.3460    5.83  2.3e-08 ***
poly(exper, 2)2  -0.8724     0.3197   -2.73  0.00694 ** 
sigma             0.2581     0.0188   13.71  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## test utility functions for common intervals
> cat("Boundaries:\n")
Boundaries:
> print(boundaries(m))
Boundary 1 Boundary 2 Boundary 3 Boundary 4 Boundary 5 Boundary 6 
      -Inf      1.609      2.303      2.708      3.219        Inf 
> cat("Intervals (sample):\n")
Intervals (sample):
> print(intervals(m)[1:10,])
              lb    ub
Boundary 3 2.303 2.708
Boundary 2 1.609 2.303
Boundary 2 1.609 2.303
Boundary 2 1.609 2.303
Boundary 2 1.609 2.303
Boundary 2 1.609 2.303
Boundary 2 1.609 2.303
Boundary 2 1.609 2.303
Boundary 3 2.303 2.708
Boundary 4 2.708 3.219
> 
> ## test predictions
> Ey <- predict(m, type="link")
> cat("Link prediction (sample):\n")
Link prediction (sample):
> print(Ey[1:10])
  669   752   306   336   875   844   113    53   942  1359 
2.366 2.198 2.048 2.312 2.317 2.121 2.315 2.096 2.292 2.677 
> Eyc <- predict(m, type="linkConditional")
> cat("Conditional mean prediction (sample):\n")
Conditional mean prediction (sample):
> print(Eyc[1:10])
  669   752   306   336   875   844   113    53   942  1359 
2.479 2.063 1.999 2.104 2.105 2.031 2.105 2.021 2.466 2.886 
> 
> ## Test if the sqrt(.Machine$double.eps) is a good proxy for minimal
> ## interval width
> lb <- intBound[salary]
>                            # test (Inf,Inf) intervals
> lb <- log(lb)
> lb[1] <- -Inf
> lb[2] <- Inf
> ub <- lb + 1e-6
> m <- intReg(cbind(lb,ub) ~ 1, data=Bwages, minIntervalWidth=0, gradtol=0)
> cat("Interval width 1e-6:\n")
Interval width 1e-6:
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -2853 
200 observations, 2 free parameters (df = 198)
      Estimate Std. Error t value Pr(>|t|)    
        2.0241     0.0345    58.6   <2e-16 ***
sigma   0.4372     0.0376    11.6   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
>                            # should return code 2: function value withing tolerance
>                            # limit
> ub <- lb + 1e-7
> m <- intReg(cbind(lb,ub) ~ 1, data=Bwages, minIntervalWidth=0, gradtol=0)
> cat("Interval width 1e-7:\n")
Interval width 1e-7:
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 14 iterations
Return code 3: Last step could not find a value above the current.
Boundary of parameter space?  
Consider switching to a more robust optimisation method temporarily.
Log-Likelihood: -3309 
200 observations, 2 free parameters (df = 198)
      Estimate Std. Error t value Pr(>|t|)    
        2.0241     0.0345    58.6   <2e-16 ***
sigma   0.4372     0.0376    11.6   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
>                            # should return code 3: cannot find better point
> 
> ## Test the same with cloglog disturbances
> m <- intReg(salary ~ factor(educ) + poly(exper, 2), data=Bwages,
+             boundaries=log(intBound),
+             method="logistic")
> cat("Same, logit disturbances:\n")
Same, logit disturbances:
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 14 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -169.4 
200 observations, 8 free parameters (df = 192)
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)       1.9211     0.1702   11.28  < 2e-16 ***
factor(educ)2     0.2104     0.1736    1.21   0.2270    
factor(educ)3     0.3715     0.1714    2.17   0.0314 *  
factor(educ)4     0.4801     0.1790    2.68   0.0080 ** 
factor(educ)5     0.6939     0.1748    3.97   0.0001 ***
poly(exper, 2)1   1.9717     0.3342    5.90  1.6e-08 ***
poly(exper, 2)2  -0.8785     0.3068   -2.86   0.0047 ** 
sigma             0.1413     0.0128   11.03  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> cat("Disturbances:\n")
Disturbances:
> print(disturbances(m))
[1] "logistic"
> 
> 
> proc.time()
   user  system elapsed 
  1.007   0.428   1.008 
