
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Example of observation-specific boundaries
> ## Estimate the willingness to pay for the Kakadu National Park
> ## Data given in intervals -- 'lower' for lower bound and 'upper' for upper bound.
> ## Note that dichotomous-coice answers are already coded to 'lower' and 'upper'
> set.seed(1)
> options(digits=5)
> library(intReg)
Loading required package: maxLik
Loading required package: miscTools
Loading required package: sets
> library(Ecdat)
> data(Kakadu)
> ## Estimate in log form, change 999 to Inf
> lb <- log(Kakadu$lower)
> ub <- Kakadu$upper
> ub[ub > 998] <- Inf
> ub <- log(ub)
> y <- cbind(lb, ub)
> m <- intReg(y ~ sex + log(income) + age + schooling + 
+               recparks + jobs + lowrisk + wildlife + future + aboriginal + finben +
+               mineparks + moreparks + gov +
+               envcon + vparks + tvenv + major, data=Kakadu)
> ## You may want to compare the results to Werner (1999),
> ## Journal of Business and Economics Statistics 17(4), pp 479-486
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 12 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -1490 
 observations,  free parameters (df = 1807)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  2.25146    1.22942    1.83    0.067 .  
sexmale     -0.22498    0.21511   -1.05    0.296    
log(income)  0.37303    0.13809    2.70    0.007 ** 
age         -0.03604    0.00629   -5.73  1.2e-08 ***
schooling   -0.03188    0.05914   -0.54    0.590    
recparks     0.08365    0.09230    0.91    0.365    
jobs        -0.42946    0.09285   -4.63  4.0e-06 ***
lowrisk     -0.70736    0.08829   -8.01  2.0e-15 ***
wildlife     0.29810    0.15230    1.96    0.050 .  
future       0.05552    0.12297    0.45    0.652    
aboriginal   0.13956    0.08455    1.65    0.099 .  
finben      -0.66825    0.09444   -7.08  2.1e-12 ***
mineparks    0.85237    0.08997    9.47  < 2e-16 ***
moreparks    0.38947    0.09179    4.24  2.3e-05 ***
gov          0.00487    0.31499    0.02    0.988    
envconyes    0.42530    0.20733    2.05    0.040 *  
vparksyes    0.47531    0.22751    2.09    0.037 *  
tvenv       -0.08446    0.07584   -1.11    0.266    
majoryes     0.46565    0.19908    2.34    0.019 *  
sigma        1.81019    0.09277   19.51  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## test model.matrix
> mm <- model.matrix(m)
> print(mm[i <- sample(nrow(mm), 10),])
     (Intercept) sexmale log(income) age schooling recparks jobs lowrisk
486            1       1      3.5553  42         5        5    5       3
680            1       0      1.0986  32         3        4    3       5
1046           1       0      2.1972  27         3        5    3       1
1657           1       0      3.2958  42         0        2    1       3
368            1       1      3.5553  32         6        5    3       5
1637           1       0      2.1972  70         3        2    1       2
1721           1       1      2.7726  70         3        3    2       2
1203           1       0      3.2189  70         6        5    1       1
1145           1       1      4.0943  37         4        3    1       1
113            1       1      3.2189  52         5        3    2       5
     wildlife future aboriginal finben mineparks moreparks gov envconyes
486         5      5          4      3         5         4   1         0
680         5      5          5      3         4         5   1         1
1046        5      3          2      5         5         4   1         1
1657        5      5          2      2         5         3   1         1
368         5      5          4      5         1         5   1         0
1637        5      5          3      2         5         5   1         1
1721        5      5          3      3         4         5   1         1
1203        5      5          5      1         5         5   1         1
1145        5      5          4      3         1         4   1         0
113         4      4          3      4         2         2   2         1
     vparksyes tvenv majoryes
486          1     1        0
680          1     1        0
1046         1     1        1
1657         1     7        1
368          1     1        1
1637         1     1        1
1721         1     1        1
1203         1     1        0
1145         1     1        0
113          1     2        0
> 
> ##
> ## Example of common intervals for all the observations
> ##
> library(Ecdat)
> data(Bwages)
> ## calculate an ordinary Mincer-style wage regression.  
> ## Note: gross hourly wage rate in EUR
> intervals <- c(0, 5, 10, 15, 25, Inf)
> salary <- cut(Bwages$wage, intervals)
> int <- intReg(salary ~ factor(educ) + poly(exper, 2), data=Bwages, boundaries=log(intervals))
Warning message:
In log(Pr) : NaNs produced
> ## Note: use logs for the intervals in Euros.  We do not have to
> ## transform salaris to log form as this does not change the intervals.
> ## Ignore any warnings
> cat("Interval regression:\n")
Interval regression:
> print(summary(int))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 10 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -1346.8 
 observations,  free parameters (df = 1464)
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)      1.90447    0.03772   50.48  < 2e-16 ***
factor(educ)2    0.21488    0.04214    5.10  3.8e-07 ***
factor(educ)3    0.36234    0.04060    8.93  < 2e-16 ***
factor(educ)4    0.51896    0.04168   12.45  < 2e-16 ***
factor(educ)5    0.71296    0.04102   17.38  < 2e-16 ***
poly(exper, 2)1  6.44361    0.34915   18.46  < 2e-16 ***
poly(exper, 2)2 -2.11563    0.30115   -7.03  3.3e-12 ***
sigma            0.15630    0.00445   35.12  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> ## Test model.frame
> mf <- model.frame(int)
> print(mf[i <- sample(nrow(mf), 10),])
      salary factor(educ) poly(exper, 2).1 poly(exper, 2).2
304  (10,15]            2        0.0225236       -0.0128071
260   (5,10]            2       -0.0390261        0.0409867
1010  (5,10]            4        0.0045716       -0.0240800
565  (10,15]            3        0.0430402        0.0272654
1131  (5,10]            4       -0.0390261        0.0409867
731  (15,25]            3        0.0379111        0.0145284
1053  (5,10]            4       -0.0185095       -0.0059465
1454 (10,15]            5        0.0122653       -0.0219677
557   (5,10]            3       -0.0133804       -0.0131483
1138 (10,15]            4        0.0404756        0.0206703
> print(model.response(mf)[i])
    304     260    1010     565    1131     731    1053    1454     557    1138 
(10,15]  (5,10]  (5,10] (10,15]  (5,10] (15,25]  (5,10] (10,15]  (5,10] (10,15] 
Levels: (0,5] (5,10] (10,15] (15,25] (25,Inf]
> 
> ##
> ## Small data, large number of intervals (by Thierry Kalisa)
> ##
> a <- c(0.002300, 0.020000, 0.000150, 0.000005, 0.002300, 0.000045, 0.000150,
+        0.000110, 0.000110, 0.000005, 0.010000, 0.000490, 0.000110, 0.000005,
+        0.000600, 0.000380, 0.000600, 0.005275, 0.005275, 0.000045, 0.000075,
+        0.000600, 0.000600, 0.005275, 0.000075, 0.001650, 0.001100, 0.000005,
+        0.000025, 0.005275, 0.000150, 0.005275, 0.000005, 0.000110, 0.000270,
+        0.000600, 0.000600, 0.000380, 0.000110, 0.000380, 0.000270, 0.000490,
+        0.000045, 0.000110, 0.000110, 0.000150, 0.000005, 0.000110, 0.000045,
+        0.005275, 0.000600, 0.000200, 0.003475, 0.005275, 0.000005, 0.000600,
+        0.000200, 0.000075, 0.000600, 0.000600, 0.000075, 0.000230, 0.000490,
+        0.005275, 0.000230, 0.000110, 0.000490, 0.000045, 0.000075, 0.001650,
+        0.000600, 0.000490, 0.000005, 0.003475, 0.001650, 0.000150, 0.000380,
+        0.017500, 0.003475, 0.000270, 0.000230, 0.005275, 0.000045, 0.000045,
+        0.000075, 0.003475, 0.000150, 0.002300, 0.001650, 0.001100, 0.000005,
+        0.000075, 0.000025, 0.000025, 0.000150, 0.001100)
> b <- c(0.003475, 0.040000, 0.005275, 0.040000, 0.015000, 0.001100, 0.000380,
+        0.003475, 0.003475, 0.040000, 0.020000, 0.007075, 0.000490, 0.003475,
+        0.007075, 0.005275, 0.012500, 0.012500, 0.010000, 0.000270, 0.000200,
+        0.002300, 0.010000, 0.010000, 0.001650, 0.003475, 0.005275, 0.003475,
+        0.003475, 0.010000, 0.000600, 0.020000, 0.000045, 0.001650, 0.010000,
+        0.005275, 0.020000, 0.001650, 0.005275, 0.003475, 0.003475, 0.007075,
+        0.002300, 0.010000, 0.000270, 0.000270, 0.003475, 0.000600, 0.000270,
+        0.007075, 0.003475, 0.010000, 0.010000, 0.012500, 0.000045, 0.010000,
+        0.003475, 0.010000, 0.012500, 0.003475, 0.000380, 0.003475, 0.005275,
+        0.008650, 0.000600, 0.002300, 0.003475, 0.005275, 0.003475, 0.003475,
+        0.003475, 0.002300, 0.000025, 0.017500, 0.005275, 0.003475, 0.001650,
+        0.020000, 0.040000, 0.001650, 0.003475, 0.008650, 0.000200, 0.000110,
+        0.000490, 0.040000, 0.000600, 0.020000, 0.005275, 0.008650, 0.000490,
+        0.005275, 0.000230, 0.000200, 0.000270, 0.005275)
> c <-c(3, 4, 3, 3, 3, 1, 2, 1, 3, 4, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2, 2, 3, 1, 2, 1, 2, 3, 2, 4, 3, 4, 2,
+       4, 2, 1, 2, 4, 3, 2, 3, 2, 2, 3, 4, 2, 1, 3, 3, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 2, 3, 2, 2, 3, 1,
+       3, 2, 2, 1, 2, 2, 2, 2, 1, 3, 2, 3, 2, 1, 1, 2, 2, 1, 1, 2, 3,
+       1, 2, 3, 2, 2, 1, 1, 4, 1, 3, 3)
> ab <- cbind(a,b)
> summary(intReg(ab~c))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 33 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -181.66 
 observations,  free parameters (df = 93)
             Estimate Std. Error t value Pr(>|t|)    
(Intercept)  2.53e-03   7.58e-04    3.33   0.0012 ** 
c           -7.04e-05   3.45e-04   -0.20   0.8387    
sigma        1.57e-03   1.11e-04   14.07   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
Warning message:
In log(Pr) : NaNs produced
> 
