
R Under development (unstable) (2014-12-05 r67105) -- "Unsuffered Consequences"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Example of observation-specific boundaries
> ## Estimate the willingness to pay for the Kakadu National Park
> ## Data given in intervals -- 'lower' for lower bound and 'upper' for upper bound.
> ## Note that dichotomous-coice answers are already coded to 'lower' and 'upper'
> set.seed(1)
> options(digits=5)
> library(intReg)
Loading required package: miscTools
Loading required package: maxLik

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> library(Ecdat)
Loading required package: Ecfun

Attaching package: 'Ecdat'

The following object is masked from 'package:datasets':

    Orange

> data(Kakadu)
> ## Estimate in log form, change 999 to Inf
> lb <- log(Kakadu$lower)
> ub <- Kakadu$upper
> ub[ub > 998] <- Inf
> ub <- log(ub)
> y <- cbind(lb, ub)
> m <- intReg(y ~ sex + log(income) + age + schooling + 
+               recparks + jobs + lowrisk + wildlife + future + aboriginal + finben +
+               mineparks + moreparks + gov +
+               envcon + vparks + tvenv + major, data=Kakadu)
> ## You may want to compare the results to Werner (1999),
> ## Journal of Business and Economics Statistics 17(4), pp 479-486
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 13 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -1493.2 
1827 observations, 20 free parameters (df = 1807)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  2.12952    1.22441    1.74   0.0822 .  
sexmale     -0.26448    0.21580   -1.23   0.2205    
log(income)  0.39486    0.14252    2.77   0.0057 ** 
age         -0.03553    0.00643   -5.52  3.8e-08 ***
schooling   -0.01319    0.06083   -0.22   0.8284    
recparks     0.06110    0.09223    0.66   0.5078    
jobs        -0.47881    0.09250   -5.18  2.5e-07 ***
lowrisk     -0.69250    0.09166   -7.55  6.6e-14 ***
wildlife     0.24758    0.15048    1.65   0.1001    
future       0.06840    0.12339    0.55   0.5794    
aboriginal   0.12848    0.08501    1.51   0.1309    
finben      -0.62410    0.09659   -6.46  1.3e-10 ***
mineparks    0.87101    0.09471    9.20  < 2e-16 ***
moreparks    0.40875    0.09312    4.39  1.2e-05 ***
gov          0.08584    0.30379    0.28   0.7775    
envconyes    0.42509    0.21077    2.02   0.0439 *  
vparksyes    0.44573    0.23064    1.93   0.0534 .  
tvenv       -0.06360    0.07750   -0.82   0.4119    
majoryes     0.47074    0.20216    2.33   0.0200 *  
sigma        3.14427    0.15062   20.88  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## test model.matrix
> mm <- model.matrix(m)
> print(mm[i <- sample(nrow(mm), 10),])
     (Intercept) sexmale log(income) age schooling recparks jobs lowrisk
486            1       1      3.5553  42         5        5    5       3
680            1       0      1.0986  32         3        4    3       5
1046           1       0      2.1972  27         3        5    3       1
1657           1       0      3.2958  42         0        2    1       3
368            1       1      3.5553  32         6        5    3       5
1637           1       0      2.1972  70         3        2    1       2
1721           1       1      2.7726  70         3        3    2       2
1203           1       0      3.2189  70         6        5    1       1
1145           1       1      4.0943  37         4        3    1       1
113            1       1      3.2189  52         5        3    2       5
     wildlife future aboriginal finben mineparks moreparks gov envconyes
486         5      5          4      3         5         4   1         0
680         5      5          5      3         4         5   1         1
1046        5      3          2      5         5         4   1         1
1657        5      5          2      2         5         3   1         1
368         5      5          4      5         1         5   1         0
1637        5      5          3      2         5         5   1         1
1721        5      5          3      3         4         5   1         1
1203        5      5          5      1         5         5   1         1
1145        5      5          4      3         1         4   1         0
113         4      4          3      4         2         2   2         1
     vparksyes tvenv majoryes
486          1     1        0
680          1     1        0
1046         1     1        1
1657         1     7        1
368          1     1        1
1637         1     1        1
1721         1     1        1
1203         1     1        0
1145         1     1        0
113          1     2        0
> 
> ##
> ## Example of common intervals for all the observations
> ##
> library(Ecdat)
> data(Bwages)
> ## calculate an ordinary Mincer-style wage regression.  
> ## Note: gross hourly wage rate in EUR
> intervals <- c(0, 5, 10, 15, 25, Inf)
> salary <- cut(Bwages$wage, intervals)
> int <- intReg(salary ~ factor(educ) + poly(exper, 2), data=Bwages, boundaries=log(intervals))
> ## Note: use logs for the intervals in Euros.  We do not have to
> ## transform salaris to log form as this does not change the intervals.
> ## Ignore any warnings
> cat("Interval regression:\n")
Interval regression:
> print(summary(int))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 12 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -1354 
1472 observations, 8 free parameters (df = 1464)
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)      1.89400    0.03865   49.01  < 2e-16 ***
factor(educ)2    0.21310    0.04333    4.92  9.7e-07 ***
factor(educ)3    0.36879    0.04173    8.84  < 2e-16 ***
factor(educ)4    0.53003    0.04307   12.31  < 2e-16 ***
factor(educ)5    0.71758    0.04168   17.22  < 2e-16 ***
poly(exper, 2)1  6.49870    0.35543   18.28  < 2e-16 ***
poly(exper, 2)2 -2.16805    0.28946   -7.49  1.2e-13 ***
sigma            0.28467    0.00606   46.96  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## Test model.frame
> mf <- model.frame(int)
> print(mf[i <- sample(nrow(mf), 10),])
      salary factor(educ) poly(exper, 2).1 poly(exper, 2).2
304  (10,15]            2        0.0225236       -0.0128071
260   (5,10]            2       -0.0390261        0.0409867
1010  (5,10]            4        0.0045716       -0.0240800
565  (10,15]            3        0.0430402        0.0272654
1131  (5,10]            4       -0.0390261        0.0409867
731  (15,25]            3        0.0379111        0.0145284
1053  (5,10]            4       -0.0185095       -0.0059465
1454 (10,15]            5        0.0122653       -0.0219677
557   (5,10]            3       -0.0133804       -0.0131483
1138 (10,15]            4        0.0404756        0.0206703
> print(model.response(mf)[i])
    304     260    1010     565    1131     731    1053    1454     557    1138 
(10,15]  (5,10]  (5,10] (10,15]  (5,10] (15,25]  (5,10] (10,15]  (5,10] (10,15] 
Levels: (0,5] (5,10] (10,15] (15,25] (25,Inf]
> 
> ##
> ## Small data, large number of intervals (by Thierry Kalisa)
> ##
> a <- c(0.002300, 0.020000, 0.000150, 0.000005, 0.002300, 0.000045, 0.000150,
+        0.000110, 0.000110, 0.000005, 0.010000, 0.000490, 0.000110, 0.000005,
+        0.000600, 0.000380, 0.000600, 0.005275, 0.005275, 0.000045, 0.000075,
+        0.000600, 0.000600, 0.005275, 0.000075, 0.001650, 0.001100, 0.000005,
+        0.000025, 0.005275, 0.000150, 0.005275, 0.000005, 0.000110, 0.000270,
+        0.000600, 0.000600, 0.000380, 0.000110, 0.000380, 0.000270, 0.000490,
+        0.000045, 0.000110, 0.000110, 0.000150, 0.000005, 0.000110, 0.000045,
+        0.005275, 0.000600, 0.000200, 0.003475, 0.005275, 0.000005, 0.000600,
+        0.000200, 0.000075, 0.000600, 0.000600, 0.000075, 0.000230, 0.000490,
+        0.005275, 0.000230, 0.000110, 0.000490, 0.000045, 0.000075, 0.001650,
+        0.000600, 0.000490, 0.000005, 0.003475, 0.001650, 0.000150, 0.000380,
+        0.017500, 0.003475, 0.000270, 0.000230, 0.005275, 0.000045, 0.000045,
+        0.000075, 0.003475, 0.000150, 0.002300, 0.001650, 0.001100, 0.000005,
+        0.000075, 0.000025, 0.000025, 0.000150, 0.001100)
> b <- c(0.003475, 0.040000, 0.005275, 0.040000, 0.015000, 0.001100, 0.000380,
+        0.003475, 0.003475, 0.040000, 0.020000, 0.007075, 0.000490, 0.003475,
+        0.007075, 0.005275, 0.012500, 0.012500, 0.010000, 0.000270, 0.000200,
+        0.002300, 0.010000, 0.010000, 0.001650, 0.003475, 0.005275, 0.003475,
+        0.003475, 0.010000, 0.000600, 0.020000, 0.000045, 0.001650, 0.010000,
+        0.005275, 0.020000, 0.001650, 0.005275, 0.003475, 0.003475, 0.007075,
+        0.002300, 0.010000, 0.000270, 0.000270, 0.003475, 0.000600, 0.000270,
+        0.007075, 0.003475, 0.010000, 0.010000, 0.012500, 0.000045, 0.010000,
+        0.003475, 0.010000, 0.012500, 0.003475, 0.000380, 0.003475, 0.005275,
+        0.008650, 0.000600, 0.002300, 0.003475, 0.005275, 0.003475, 0.003475,
+        0.003475, 0.002300, 0.000025, 0.017500, 0.005275, 0.003475, 0.001650,
+        0.020000, 0.040000, 0.001650, 0.003475, 0.008650, 0.000200, 0.000110,
+        0.000490, 0.040000, 0.000600, 0.020000, 0.005275, 0.008650, 0.000490,
+        0.005275, 0.000230, 0.000200, 0.000270, 0.005275)
> c <-c(3, 4, 3, 3, 3, 1, 2, 1, 3, 4, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2, 2, 3, 1, 2, 1, 2, 3, 2, 4, 3, 4, 2,
+       4, 2, 1, 2, 4, 3, 2, 3, 2, 2, 3, 4, 2, 1, 3, 3, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 2, 3, 2, 2, 3, 1,
+       3, 2, 2, 1, 2, 2, 2, 2, 1, 3, 2, 3, 2, 1, 1, 2, 2, 1, 1, 2, 3,
+       1, 2, 3, 2, 2, 1, 1, 4, 1, 3, 3)
> ab <- cbind(a,b)
> mNorm <- intReg(ab~c)
> print(summary(mNorm))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 97 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -195.04 
96 observations, 3 free parameters (df = 93)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.002875   0.000870    3.30   0.0014 ** 
c           0.000121   0.000328    0.37   0.7128    
sigma       0.003569   0.000208   17.19   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## Test the same with cloglog disturbances
> mCloglog <- intReg(ab~c, method="cloglog")
> print(summary(mCloglog))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 41 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -164.55 
96 observations, 3 free parameters (df = 93)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) 0.001486   0.000660    2.25    0.027 *  
c           0.000032   0.000285    0.11    0.911    
sigma       0.001902   0.000140   13.62   <2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> proc.time()
   user  system elapsed 
  5.920   0.040   5.963 
