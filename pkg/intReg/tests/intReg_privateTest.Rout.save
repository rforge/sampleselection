
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Example of observation-specific boundaries
> ## Estimate the willingness to pay for the Kakadu National Park
> ## Data given in intervals -- 'lower' for lower bound and 'upper' for upper bound.
> ## Note that dichotomous-coice answers are already coded to 'lower' and 'upper'
> set.seed(1)
> options(digits=4)
> library(intReg)
Loading required package: miscTools
Loading required package: maxLik

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> data(Kakadu, package="Ecdat")
> ## Estimate in log form, change 999 to Inf
> Kakadu <- Kakadu[sample(nrow(Kakadu), 300),]
>                            # Speed up the tests
> lb <- log(Kakadu$lower)
> ub <- Kakadu$upper
> ub[ub > 998] <- Inf
> ub <- log(ub)
> y <- cbind(lb, ub)
> m <- intReg(y ~ sex + log(income) + age + schooling + 
+               recparks + jobs + lowrisk + wildlife + future + aboriginal + finben +
+               mineparks + moreparks + gov +
+               envcon + vparks + tvenv + major, data=Kakadu)
> ## You may want to compare the results to Werner (1999),
> ## Journal of Business and Economics Statistics 17(4), pp 479-486
> 
> ## Test coef, stdEr, summary with and without boundaries
> print(coef(m))
(Intercept)     sexmale log(income)         age   schooling    recparks 
   7.390819   -0.255675    0.372862   -0.044666   -0.195242   -0.034879 
       jobs     lowrisk    wildlife      future  aboriginal      finben 
  -0.687059   -0.864370   -0.012024    0.145218    0.002306   -0.157557 
  mineparks   moreparks         gov   envconyes   vparksyes       tvenv 
   0.539109    0.521039   -1.508886    0.237526    0.275681   -0.125687 
   majoryes       sigma 
   0.436197    2.612337 
> print(coef(m, boundaries=TRUE))
(Intercept)     sexmale log(income)         age   schooling    recparks 
   7.390819   -0.255675    0.372862   -0.044666   -0.195242   -0.034879 
       jobs     lowrisk    wildlife      future  aboriginal      finben 
  -0.687059   -0.864370   -0.012024    0.145218    0.002306   -0.157557 
  mineparks   moreparks         gov   envconyes   vparksyes       tvenv 
   0.539109    0.521039   -1.508886    0.237526    0.275681   -0.125687 
   majoryes         L 1         U 1         L 2         U 2         L 3 
   0.436197        -Inf    0.693147        -Inf    1.609438        -Inf 
        U 3         L 4         U 4         L 5         U 5         L 6 
   2.995732        -Inf    3.912023    0.693147    1.609438    1.609438 
        U 6         L 7         U 7         L 8         U 8         L 9 
   2.995732    2.995732    3.912023    2.995732         Inf    3.912023 
        U 9        L 10        U 10        L 11        U 11        L 12 
   4.605170    3.912023         Inf    4.605170    5.521461    4.605170 
       U 12        L 13        U 13       sigma 
        Inf    5.521461         Inf    2.612337 
> print(stdEr(m))
(Intercept)     sexmale log(income)         age   schooling    recparks 
    2.95567     0.51571     0.31161     0.01543     0.14256     0.23039 
       jobs     lowrisk    wildlife      future  aboriginal      finben 
    0.19383     0.20823     0.29107     0.25379     0.20609     0.20115 
  mineparks   moreparks         gov   envconyes   vparksyes       tvenv 
    0.20615     0.20251     1.05768     0.46896     0.52456     0.15555 
   majoryes       sigma 
    0.44708     0.34251 
> print(stdEr(m, boundaries=TRUE))
(Intercept)     sexmale log(income)         age   schooling    recparks 
    2.95567     0.51571     0.31161     0.01543     0.14256     0.23039 
       jobs     lowrisk    wildlife      future  aboriginal      finben 
    0.19383     0.20823     0.29107     0.25379     0.20609     0.20115 
  mineparks   moreparks         gov   envconyes   vparksyes       tvenv 
    0.20615     0.20251     1.05768     0.46896     0.52456     0.15555 
   majoryes       sigma 
    0.44708     0.34251 
> print(summary(m))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 18 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -226.8 
300 observations, 20 free parameters (df = 280)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  7.39082    2.95567    2.50  0.01297 *  
sexmale     -0.25567    0.51571   -0.50  0.62044    
log(income)  0.37286    0.31161    1.20  0.23248    
age         -0.04467    0.01543   -2.90  0.00408 ** 
schooling   -0.19524    0.14256   -1.37  0.17192    
recparks    -0.03488    0.23039   -0.15  0.87978    
jobs        -0.68706    0.19383   -3.54  0.00046 ***
lowrisk     -0.86437    0.20823   -4.15  4.4e-05 ***
wildlife    -0.01202    0.29107   -0.04  0.96708    
future       0.14522    0.25379    0.57  0.56765    
aboriginal   0.00231    0.20609    0.01  0.99108    
finben      -0.15756    0.20115   -0.78  0.43411    
mineparks    0.53911    0.20615    2.62  0.00940 ** 
moreparks    0.52104    0.20251    2.57  0.01060 *  
gov         -1.50889    1.05768   -1.43  0.15481    
envconyes    0.23753    0.46896    0.51  0.61291    
vparksyes    0.27568    0.52456    0.53  0.59962    
tvenv       -0.12569    0.15555   -0.81  0.41976    
majoryes     0.43620    0.44708    0.98  0.33007    
sigma        2.61234         NA      NA       NA    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> print(summary(m, boundaries=TRUE))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 18 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -226.8 
300 observations, 20 free parameters (df = 280)
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  7.39082    2.95567    2.50  0.01297 *  
sexmale     -0.25567    0.51571   -0.50  0.62044    
log(income)  0.37286    0.31161    1.20  0.23248    
age         -0.04467    0.01543   -2.90  0.00408 ** 
schooling   -0.19524    0.14256   -1.37  0.17192    
recparks    -0.03488    0.23039   -0.15  0.87978    
jobs        -0.68706    0.19383   -3.54  0.00046 ***
lowrisk     -0.86437    0.20823   -4.15  4.4e-05 ***
wildlife    -0.01202    0.29107   -0.04  0.96708    
future       0.14522    0.25379    0.57  0.56765    
aboriginal   0.00231    0.20609    0.01  0.99108    
finben      -0.15756    0.20115   -0.78  0.43411    
mineparks    0.53911    0.20615    2.62  0.00940 ** 
moreparks    0.52104    0.20251    2.57  0.01060 *  
gov         -1.50889    1.05768   -1.43  0.15481    
envconyes    0.23753    0.46896    0.51  0.61291    
vparksyes    0.27568    0.52456    0.53  0.59962    
tvenv       -0.12569    0.15555   -0.81  0.41976    
majoryes     0.43620    0.44708    0.98  0.33007    
L 1             -Inf    0.34251    -Inf  < 2e-16 ***
U 1          0.69315    2.95567    0.23  0.81476    
L 2             -Inf    0.51571    -Inf  < 2e-16 ***
U 2          1.60944    0.31161    5.16  4.6e-07 ***
L 3             -Inf    0.01543    -Inf  < 2e-16 ***
U 3          2.99573    0.14256   21.01  < 2e-16 ***
L 4             -Inf    0.23039    -Inf  < 2e-16 ***
U 4          3.91202    0.19383   20.18  < 2e-16 ***
L 5          0.69315    0.20823    3.33  0.00099 ***
U 5          1.60944    0.29107    5.53  7.4e-08 ***
L 6          1.60944    0.25379    6.34  9.1e-10 ***
U 6          2.99573    0.20609   14.54  < 2e-16 ***
L 7          2.99573    0.20115   14.89  < 2e-16 ***
U 7          3.91202    0.20615   18.98  < 2e-16 ***
L 8          2.99573    0.20251   14.79  < 2e-16 ***
U 8              Inf    1.05768     Inf  < 2e-16 ***
L 9          3.91202    0.46896    8.34  3.4e-15 ***
U 9          4.60517    0.52456    8.78  < 2e-16 ***
L 10         3.91202    0.15555   25.15  < 2e-16 ***
U 10             Inf    0.44708     Inf  < 2e-16 ***
L 11         4.60517    0.34251   13.45  < 2e-16 ***
U 11         5.52146    2.95567    1.87  0.06279 .  
L 12         4.60517    0.51571    8.93  < 2e-16 ***
U 12             Inf    0.31161     Inf  < 2e-16 ***
L 13         5.52146    0.01543  357.93  < 2e-16 ***
U 13             Inf    0.14256     Inf  < 2e-16 ***
sigma        2.61234    0.23039   11.34  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
Warning messages:
1: In coef/stdErr :
  longer object length is not a multiple of shorter object length
2: In cbind(coef, stdErr, coef/stdErr, rep(NA, length(coef))) :
  number of rows of result is not a multiple of vector length (arg 2)
3: In coef/stdErr :
  longer object length is not a multiple of shorter object length
> 
> ## test model.matrix
> mm <- model.matrix(m)
> print(mm[i <- sample(nrow(mm), 10),])
     (Intercept) sexmale log(income) age schooling recparks jobs lowrisk
840            1       1       2.197  70         5        5    5       5
1565           1       1       4.094  32         5        5    1       2
295            1       0       2.197  70         5        3    4       4
889            1       0       2.197  70         4        5    5       5
1256           1       0       3.219  21         6        3    1       1
1507           1       0       4.094  32         6        2    1       3
1530           1       1       2.197  52         3        5    1       1
1750           1       0       3.219  21         4        4    2       2
1406           1       1       3.807  37         6        4    1       2
1225           1       0       1.099  32         3        5    3       2
     wildlife future aboriginal finben mineparks moreparks gov envconyes
840         5      5          5      5         1         3   1         1
1565        5      5          5      1         5         5   1         1
295         2      1          1      5         3         2   1         0
889         5      5          1      3         3         4   1         0
1256        5      5          5      1         4         3   1         1
1507        5      5          5      1         4         5   1         1
1530        5      5          3      5         5         5   1         1
1750        5      4          4      3         5         3   1         0
1406        4      5          2      1         5         3   1         1
1225        5      4          5      3         5         5   1         1
     vparksyes tvenv majoryes
840          1     1        0
1565         1     1        1
295          0     1        1
889          0     1        0
1256         1     2        0
1507         1     1        1
1530         1     1        0
1750         1     2        0
1406         0     1        0
1225         1     1        0
> 
> ## test utility functions
> print(boundaries(m))
   L 1    U 1    L 2    U 2    L 3    U 3    L 4    U 4    L 5    U 5    L 6 
  -Inf 0.6931   -Inf 1.6094   -Inf 2.9957   -Inf 3.9120 0.6931 1.6094 1.6094 
   U 6    L 7    U 7    L 8    U 8    L 9    U 9   L 10   U 10   L 11   U 11 
2.9957 2.9957 3.9120 2.9957    Inf 3.9120 4.6052 3.9120    Inf 4.6052 5.5215 
  L 12   U 12   L 13   U 13 
4.6052    Inf 5.5215    Inf 
> print(disturbances(m))
[1] "probit"
> print(intervals(m)[sample(seq(nObs(m)), 10),])
        lb    ub
1398 3.912 4.605
918   -Inf 3.912
1202 3.912   Inf
1531 4.605   Inf
1680 5.521   Inf
295   -Inf 2.996
482  1.609 2.996
1712 5.521   Inf
577  2.996   Inf
315   -Inf 2.996
> 
> ##
> ## Example of common intervals for all the observations
> ##
> library(Ecdat)
Loading required package: Ecfun

Attaching package: 'Ecfun'

The following object is masked from 'package:miscTools':

    checkNames


Attaching package: 'Ecdat'

The following object is masked _by_ '.GlobalEnv':

    Kakadu

The following object is masked from 'package:datasets':

    Orange

> data(Bwages)
> ## calculate an ordinary Mincer-style wage regression.  
> ## Note: gross hourly wage rate in EUR
> intervals <- c(0, 5, 10, 15, 25, Inf)
> salary <- cut(Bwages$wage, intervals)
> int <- intReg(salary ~ factor(educ) + poly(exper, 2), data=Bwages, boundaries=log(intervals))
> ## Note: use logs for the intervals in Euros.  We do not have to
> ## transform salaris to log form as this does not change the intervals.
> ## Ignore any warnings
> cat("Interval regression:\n")
Interval regression:
> print(summary(int))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 12 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -1354 
1472 observations, 8 free parameters (df = 1464)
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)       1.8940     0.0386   49.01  < 2e-16 ***
factor(educ)2     0.2131     0.0433    4.92  9.7e-07 ***
factor(educ)3     0.3688     0.0417    8.84  < 2e-16 ***
factor(educ)4     0.5300     0.0431   12.31  < 2e-16 ***
factor(educ)5     0.7176     0.0417   17.22  < 2e-16 ***
poly(exper, 2)1   6.4987     0.3554   18.28  < 2e-16 ***
poly(exper, 2)2  -2.1680     0.2895   -7.49  1.2e-13 ***
sigma             0.2847         NA      NA       NA    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## Test model.frame
> mf <- model.frame(int)
> print(mf[i <- sample(nrow(mf), 10),])
      salary factor(educ) poly(exper, 2).1 poly(exper, 2).2
979  (10,15]            4        -0.023639         0.003068
460  (10,15]            3         0.045605         0.034314
597   (5,10]            3         0.019959        -0.015777
1464 (15,25]            5         0.022524        -0.012807
1256 (15,25]            5        -0.028768         0.013895
1399 (10,15]            5        -0.021074        -0.001666
1191 (15,25]            5        -0.008251        -0.018537
1146 (10,15]            5        -0.039026         0.040987
393   (5,10]            3         0.063557         0.096340
1116  (5,10]            4        -0.018510        -0.005946
> print(model.response(mf)[i])
    979     460     597    1464    1256    1399    1191    1146     393    1116 
(10,15] (10,15]  (5,10] (15,25] (15,25] (10,15] (15,25] (10,15]  (5,10]  (5,10] 
Levels: (0,5] (5,10] (10,15] (15,25] (25,Inf]
> 
> ## test utility functions for common intervals
> print(boundaries(m))
   L 1    U 1    L 2    U 2    L 3    U 3    L 4    U 4    L 5    U 5    L 6 
  -Inf 0.6931   -Inf 1.6094   -Inf 2.9957   -Inf 3.9120 0.6931 1.6094 1.6094 
   U 6    L 7    U 7    L 8    U 8    L 9    U 9   L 10   U 10   L 11   U 11 
2.9957 2.9957 3.9120 2.9957    Inf 3.9120 4.6052 3.9120    Inf 4.6052 5.5215 
  L 12   U 12   L 13   U 13 
4.6052    Inf 5.5215    Inf 
> print(disturbances(m))
[1] "probit"
> print(intervals(m)[sample(seq(nObs(m)), 10),])
        lb    ub
1044 2.996 3.912
212   -Inf 1.609
1094 3.912   Inf
1770 5.521   Inf
1177 3.912   Inf
823  2.996   Inf
976   -Inf 3.912
1407 3.912 4.605
1045 2.996 3.912
1361 3.912 4.605
> 
> ## test predictions
> Ey <- predict(m, type="link")
> print(sample(Ey, 10))
   152    778   1492    254    436   1680    889    849    823    162 
 4.310  5.896  3.606 -1.335  1.439  9.280 -1.367  5.229  3.918  3.153 
> Eyc <- predict(m, type="linkConditional")
> print(sample(Eyc, 10))
    762    1406    1007    1286     348     568    1488     482    1754     889 
 5.3980  4.2721  3.4423  8.8252 -0.8949  8.1838  7.5759  2.3056  7.5989 -1.5048 
> 
> ##
> ## Small data, large number of intervals (by Thierry Kalisa)
> ##
> a <- c(0.002300, 0.020000, 0.000150, 0.000005, 0.002300, 0.000045, 0.000150,
+        0.000110, 0.000110, 0.000005, 0.010000, 0.000490, 0.000110, 0.000005,
+        0.000600, 0.000380, 0.000600, 0.005275, 0.005275, 0.000045, 0.000075,
+        0.000600, 0.000600, 0.005275, 0.000075, 0.001650, 0.001100, 0.000005,
+        0.000025, 0.005275, 0.000150, 0.005275, 0.000005, 0.000110, 0.000270,
+        0.000600, 0.000600, 0.000380, 0.000110, 0.000380, 0.000270, 0.000490,
+        0.000045, 0.000110, 0.000110, 0.000150, 0.000005, 0.000110, 0.000045,
+        0.005275, 0.000600, 0.000200, 0.003475, 0.005275, 0.000005, 0.000600,
+        0.000200, 0.000075, 0.000600, 0.000600, 0.000075, 0.000230, 0.000490,
+        0.005275, 0.000230, 0.000110, 0.000490, 0.000045, 0.000075, 0.001650,
+        0.000600, 0.000490, 0.000005, 0.003475, 0.001650, 0.000150, 0.000380,
+        0.017500, 0.003475, 0.000270, 0.000230, 0.005275, 0.000045, 0.000045,
+        0.000075, 0.003475, 0.000150, 0.002300, 0.001650, 0.001100, 0.000005,
+        0.000075, 0.000025, 0.000025, 0.000150, 0.001100)
> b <- c(0.003475, 0.040000, 0.005275, 0.040000, 0.015000, 0.001100, 0.000380,
+        0.003475, 0.003475, 0.040000, 0.020000, 0.007075, 0.000490, 0.003475,
+        0.007075, 0.005275, 0.012500, 0.012500, 0.010000, 0.000270, 0.000200,
+        0.002300, 0.010000, 0.010000, 0.001650, 0.003475, 0.005275, 0.003475,
+        0.003475, 0.010000, 0.000600, 0.020000, 0.000045, 0.001650, 0.010000,
+        0.005275, 0.020000, 0.001650, 0.005275, 0.003475, 0.003475, 0.007075,
+        0.002300, 0.010000, 0.000270, 0.000270, 0.003475, 0.000600, 0.000270,
+        0.007075, 0.003475, 0.010000, 0.010000, 0.012500, 0.000045, 0.010000,
+        0.003475, 0.010000, 0.012500, 0.003475, 0.000380, 0.003475, 0.005275,
+        0.008650, 0.000600, 0.002300, 0.003475, 0.005275, 0.003475, 0.003475,
+        0.003475, 0.002300, 0.000025, 0.017500, 0.005275, 0.003475, 0.001650,
+        0.020000, 0.040000, 0.001650, 0.003475, 0.008650, 0.000200, 0.000110,
+        0.000490, 0.040000, 0.000600, 0.020000, 0.005275, 0.008650, 0.000490,
+        0.005275, 0.000230, 0.000200, 0.000270, 0.005275)
> c <-c(3, 4, 3, 3, 3, 1, 2, 1, 3, 4, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2, 2, 3, 1, 2, 1, 2, 3, 2, 4, 3, 4, 2,
+       4, 2, 1, 2, 4, 3, 2, 3, 2, 2, 3, 4, 2, 1, 3, 3, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 2, 3, 2, 2, 3, 1,
+       3, 2, 2, 1, 2, 2, 2, 2, 1, 3, 2, 3, 2, 1, 1, 2, 2, 1, 1, 2, 3,
+       1, 2, 3, 2, 2, 1, 1, 4, 1, 3, 3)
> ab <- cbind(a,b)
> mNorm <- intReg(ab~c)
> print(summary(mNorm))
--------------------------------------------
Interval regression
Maximum Likelihood estimation
BHHH maximisation, 97 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -195 
96 observations, 3 free parameters (df = 93)
            Estimate Std. Error t value Pr(>|t|)   
(Intercept) 0.002875   0.000870    3.30   0.0014 **
c           0.000121   0.000328    0.37   0.7128   
sigma       0.003569         NA      NA       NA   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> ## Test the same with cloglog disturbances
> mCloglog <- intReg(ab~c, method="cloglog")
> 
> proc.time()
   user  system elapsed 
  3.765   1.372   3.654 
