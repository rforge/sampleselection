
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "mvProbit" )
Loading required package: mvtnorm
Loading required package: maxLik
Loading required package: miscTools
> library( "miscTools" )
> 
> ## generate a simulated data set
> set.seed( 123 )
> # number of observations
> nObs <- 25
> 
> # generate explanatory variables
> xMat <- cbind( 
+    const = rep( 1, nObs ),
+    x1 = as.numeric( rnorm( nObs ) > 0 ),
+    x2 = rnorm( nObs ) )
> 
> # coefficients
> beta <- cbind( c(  0.8,  1.2, -0.8 ),
+                c( -0.6,  1.0, -1.6 ),
+                c(  0.5, -0.6,  1.2 ) )
> 
> # covariance matrix of error terms
> sigma <- symMatrix( c( 1, 0.2, 0.4, 1, -0.1, 1 ) )
> 
> # generate dependent variables
> yMatLin <- xMat %*% beta 
> yMat <- ( yMatLin + rmvnorm( nObs, sigma = sigma ) ) > 0
> colnames( yMat ) <- paste( "y", 1:3, sep = "" )
> 
> # estimation with the BHHH algorithm, two-sided gradients
> estResultBHHH <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), tol = 0.5 )
> summary( estResultBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 2 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -19.97964 
12  free parameters
Estimates:
        Estimate Std. error t value Pr(> t)
b_1_0  1.2547465  3.5067451  0.3578  0.7205
b_1_1  1.5368589  3.6627174  0.4196  0.6748
b_1_2 -1.0881467  2.8615862 -0.3803  0.7038
b_2_0 -0.4738229  3.5550383 -0.1333  0.8940
b_2_1  0.8005299  4.2449545  0.1886  0.8504
b_2_2 -1.4075614  3.5740127 -0.3938  0.6937
b_3_0  0.7876993  4.5334506  0.1738  0.8621
b_3_1 -0.9546325  4.8335966 -0.1975  0.8434
b_3_2  1.6618026  4.3234450  0.3844  0.7007
R_1_2  0.0086193 27.3230134  0.0003  0.9997
R_1_3  0.0560172 29.5060335  0.0019  0.9985
R_2_3 -0.2677454  1.5071049 -0.1777  0.8590
--------------------------------------------
> 
> # estimation with the BHHH algorithm, one-sided gradients
> estResultBHHH1 <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), tol = 0.5,
+    oneSidedGrad = TRUE )
> summary( estResultBHHH1 )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 2 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -19.97965 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)
b_1_0  1.254748   3.506820  0.3578  0.7205
b_1_1  1.536860   3.662734  0.4196  0.6748
b_1_2 -1.088148   2.861629 -0.3803  0.7038
b_2_0 -0.473823   3.555059 -0.1333  0.8940
b_2_1  0.800531   4.244961  0.1886  0.8504
b_2_2 -1.407562   3.574006 -0.3938  0.6937
b_3_0  0.787700   4.533453  0.1738  0.8621
b_3_1 -0.954632   4.833593 -0.1975  0.8434
b_3_2  1.661803   4.323437  0.3844  0.7007
R_1_2  0.008617  27.323258  0.0003  0.9997
R_1_3  0.056014  29.506141  0.0019  0.9985
R_2_3 -0.267745   1.507106 -0.1777  0.8590
--------------------------------------------
> all.equal( estResultBHHH, estResultBHHH1 )
[1] "Component 1: Mean relative difference: 1.952806e-07" 
[2] "Component 2: Mean relative difference: 1.227404e-06" 
[3] "Component 3: Mean relative difference: 2.706587e-06" 
[4] "Component 4: Mean relative difference: 3.431986e-06" 
[5] "Component 11: Mean relative difference: 1.433839e-06"
> 
> # estimation with the BFGS algorithm, two-sided gradients
> estResultBFGS <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    method = "BFGS", tol = 0.5 )
> summary( estResultBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3 iterations
Return code 0: successful convergence 
Log-Likelihood: -17.72458 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)
b_1_0  1.513736   7.180880  0.2108  0.8330
b_1_1  1.504511  85.242988  0.0176  0.9859
b_1_2  0.162218   4.775285  0.0340  0.9729
b_2_0 -0.087664   4.608074 -0.0190  0.9848
b_2_1  1.130689   6.504530  0.1738  0.8620
b_2_2 -2.073874   7.755823 -0.2674  0.7892
b_3_0  0.037553   2.402632  0.0156  0.9875
b_3_1 -1.037517   5.096585 -0.2036  0.8387
b_3_2  1.845308   4.991954  0.3697  0.7116
R_1_2 -0.054026  16.907755 -0.0032  0.9975
R_1_3  0.687921  17.404842  0.0395  0.9685
R_2_3 -0.282151   2.602573 -0.1084  0.9137
--------------------------------------------
> 
> # estimation with the BFGS algorithm, one-sided gradients
> estResultBFGS1 <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    method = "BFGS", tol = 0.5, oneSidedGrad = TRUE )
> summary( estResultBFGS1 )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3 iterations
Return code 0: successful convergence 
Log-Likelihood: -17.72458 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)
b_1_0  1.513735   7.180876  0.2108  0.8330
b_1_1  1.504510  85.242894  0.0176  0.9859
b_1_2  0.162217   4.775274  0.0340  0.9729
b_2_0 -0.087665   4.608089 -0.0190  0.9848
b_2_1  1.130688   6.504546  0.1738  0.8620
b_2_2 -2.073874   7.755843 -0.2674  0.7892
b_3_0  0.037552   2.402636  0.0156  0.9875
b_3_1 -1.037518   5.096594 -0.2036  0.8387
b_3_2  1.845308   4.991959  0.3697  0.7116
R_1_2 -0.054026  16.907725 -0.0032  0.9975
R_1_3  0.687920  17.404783  0.0395  0.9685
R_2_3 -0.282151   2.602580 -0.1084  0.9137
--------------------------------------------
> all.equal( estResultBFGS, estResultBFGS1 )
[1] "Component 1: Mean relative difference: 2.570317e-08" 
[2] "Component 2: Mean relative difference: 5.649916e-07" 
[3] "Component 3: Mean relative difference: 1.685897e-06" 
[4] "Component 4: Mean relative difference: 1.492822e-06" 
[5] "Component 12: Mean relative difference: 1.033961e-06"
> 
> # estimation with the BFGS algorithm, Miwa algorithm for obtaining integrals
> estResultBFGSm <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    method = "BFGS", tol = 0.5, algorithm = Miwa( steps = 64 ) )
> summary( estResultBFGSm )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3 iterations
Return code 0: successful convergence 
Log-Likelihood: -17.72478 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)
b_1_0  1.513769   5.783963  0.2617  0.7935
b_1_1  1.504531  83.690401  0.0180  0.9857
b_1_2  0.162182   3.872580  0.0419  0.9666
b_2_0 -0.087648   4.641751 -0.0189  0.9849
b_2_1  1.130697   6.551045  0.1726  0.8630
b_2_2 -2.073903   7.730438 -0.2683  0.7885
b_3_0  0.037566   2.345371  0.0160  0.9872
b_3_1 -1.037508   5.002497 -0.2074  0.8357
b_3_2  1.845349   4.905000  0.3762  0.7068
R_1_2 -0.053977  13.935429 -0.0039  0.9969
R_1_3  0.687923  14.094734  0.0488  0.9611
R_2_3 -0.282207   2.570677 -0.1098  0.9126
--------------------------------------------
> all.equal( estResultBFGS, estResultBFGSm )
[1] "Component 1: Mean relative difference: 1.114266e-05"
[2] "Component 2: Mean relative difference: 3.027101e-05"
[3] "Component 3: Mean relative difference: 0.002953254" 
[4] "Component 4: Mean relative difference: 0.003871351" 
[5] "Component 12: Mean relative difference: 0.007541031"
> 
> # estimation with the Nelder-Mead algorithm
> estResultNM <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    method = "NM", reltol = 0.05 )
> summary( estResultNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 81 iterations
Return code 0: successful convergence 
Log-Likelihood: -16.04052 
12  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)
b_1_0  0.79871    1.72020  0.4643  0.6424
b_1_1  1.57992   13.83938  0.1142  0.9091
b_1_2 -0.20764    1.06511 -0.1949  0.8454
b_2_0 -0.21975    4.28384 -0.0513  0.9591
b_2_1  1.29119    7.00440  0.1843  0.8537
b_2_2 -3.12646    8.71888 -0.3586  0.7199
b_3_0  0.03672    1.04293  0.0352  0.9719
b_3_1 -0.63538    2.17229 -0.2925  0.7699
b_3_2  1.55684    2.14574  0.7255  0.4681
R_1_2  0.21991    7.79025  0.0282  0.9775
R_1_3  0.69796    6.63945  0.1051  0.9163
R_2_3  0.22466    3.16030  0.0711  0.9433
--------------------------------------------
> 
> 
