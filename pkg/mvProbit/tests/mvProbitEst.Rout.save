
R version 2.13.2 (2011-09-30)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "mvProbit" )
Loading required package: mvtnorm
Loading required package: maxLik
Loading required package: miscTools
Loading required package: bayesm
> library( "miscTools" )
> 
> ## generate a simulated data set
> set.seed( 123 )
> # number of observations
> nObs <- 50
> 
> # generate explanatory variables
> xMat <- cbind( 
+    const = rep( 1, nObs ),
+    x1 = as.numeric( rnorm( nObs ) > 0 ),
+    x2 = rnorm( nObs ) )
> 
> # coefficients
> beta <- cbind( c(  0.8,  1.2, -0.8 ),
+                c( -0.6,  1.0, -1.6 ),
+                c(  0.5, -0.6,  1.2 ) )
> 
> # covariance matrix of error terms
> sigma <- symMatrix( c( 1, 0.2, 0.4, 1, -0.1, 1 ) )
> 
> # generate dependent variables
> yMatLin <- xMat %*% beta 
> yMat <- ( yMatLin + rmvnorm( nObs, sigma = sigma ) ) > 0
> colnames( yMat ) <- paste( "y", 1:3, sep = "" )
> 
> # estimation with the BHHH algorithm, two-sided gradients
> estResultBHHH <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, method = "BHHH",
+    data = as.data.frame( cbind( xMat, yMat ) ), tol = 0.5 )
> summary( estResultBHHH )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 1 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -56.90544 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  1.025085   0.445480  2.3011 0.02139 *
b_1_1  1.305364   0.735115  1.7757 0.07578 .
b_1_2 -1.028087   0.688515 -1.4932 0.13539  
b_2_0 -0.782477   0.387975 -2.0168 0.04371 *
b_2_1  1.143185   0.530259  2.1559 0.03109 *
b_2_2 -1.669378   0.813076 -2.0532 0.04006 *
b_3_0  0.582290   0.641066  0.9083 0.36371  
b_3_1 -0.696668   0.898180 -0.7756 0.43796  
b_3_2  1.232833   0.624523  1.9740 0.04838 *
R_1_2  0.863217  18.600710  0.0464 0.96299  
R_1_3  0.360217   0.647118  0.5566 0.57777  
R_2_3 -0.084062   0.349091 -0.2408 0.80971  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> # estimation with the BHHH algorithm, one-sided gradients
> estResultBHHH1 <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, method = "BHHH",
+    data = as.data.frame( cbind( xMat, yMat ) ), tol = 0.5,
+    oneSidedGrad = TRUE )
> summary( estResultBHHH1 )
--------------------------------------------
Maximum Likelihood estimation
BHHH maximisation, 1 iterations
Return code 2: successive function values within tolerance limit
Log-Likelihood: -56.90544 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  1.025085   0.445479  2.3011 0.02139 *
b_1_1  1.305364   0.735114  1.7757 0.07578 .
b_1_2 -1.028087   0.688514 -1.4932 0.13539  
b_2_0 -0.782477   0.387972 -2.0168 0.04371 *
b_2_1  1.143185   0.530259  2.1559 0.03109 *
b_2_2 -1.669378   0.813066 -2.0532 0.04005 *
b_3_0  0.582290   0.641063  0.9083 0.36371  
b_3_1 -0.696668   0.898174 -0.7756 0.43796  
b_3_2  1.232833   0.624522  1.9740 0.04838 *
R_1_2  0.863217  18.600400  0.0464 0.96298  
R_1_3  0.360217   0.647118  0.5566 0.57777  
R_2_3 -0.084062   0.349090 -0.2408 0.80971  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( estResultBHHH, estResultBHHH1 )
[1] "Component 2: Mean relative difference: 1.181367e-07"     
[2] "Component 3: Mean relative difference: 1.490048e-06"     
[3] "Component 4: Mean relative difference: 4.756807e-07"     
[4] "Component 11: Mean relative difference: 4.579023e-07"    
[5] "Component 12: target, current do not match when deparsed"
> 
> # estimation with the BFGS algorithm, two-sided gradients
> estResultBFGS <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5 )
> summary( estResultBFGS )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 4 iterations
Return code 0: successful convergence 
Log-Likelihood: -52.94456 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  0.536072   0.827086  0.6481 0.51689  
b_1_1  1.161006   0.915152  1.2686 0.20457  
b_1_2 -1.142125   0.938471 -1.2170 0.22360  
b_2_0 -0.449522   0.792154 -0.5675 0.57040  
b_2_1  1.054956   0.883984  1.1934 0.23271  
b_2_2 -1.576239   0.731868 -2.1537 0.03126 *
b_3_0  0.407511   0.488973  0.8334 0.40462  
b_3_1 -0.854005   0.848706 -1.0062 0.31430  
b_3_2  1.259584   0.680400  1.8512 0.06414 .
R_1_2  0.294826   1.858166  0.1587 0.87393  
R_1_3  0.328219   0.709232  0.4628 0.64352  
R_2_3 -0.023818   0.344664 -0.0691 0.94491  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> # estimation with the BFGS algorithm, one-sided gradients
> estResultBFGS1 <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5, oneSidedGrad = TRUE )
> summary( estResultBFGS1 )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 4 iterations
Return code 0: successful convergence 
Log-Likelihood: -52.94456 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  0.536071   0.827086  0.6481 0.51689  
b_1_1  1.161006   0.915152  1.2686 0.20457  
b_1_2 -1.142125   0.938471 -1.2170 0.22360  
b_2_0 -0.449523   0.792154 -0.5675 0.57040  
b_2_1  1.054956   0.883984  1.1934 0.23271  
b_2_2 -1.576240   0.731868 -2.1537 0.03126 *
b_3_0  0.407511   0.488973  0.8334 0.40462  
b_3_1 -0.854005   0.848706 -1.0062 0.31430  
b_3_2  1.259584   0.680400  1.8512 0.06414 .
R_1_2  0.294826   1.858166  0.1587 0.87393  
R_1_3  0.328219   0.709232  0.4628 0.64352  
R_2_3 -0.023819   0.344664 -0.0691 0.94490  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( estResultBFGS, estResultBFGS1 )
[1] "Component 2: Mean relative difference: 3.039429e-07"     
[2] "Component 3: Mean relative difference: 1.044097e-06"     
[3] "Component 4: Mean relative difference: 4.568584e-07"     
[4] "Component 12: Mean relative difference: 2.912419e-07"    
[5] "Component 13: target, current do not match when deparsed"
> 
> # estimation with the BFGS algorithm, one-sided gradients, no starting values
> estResultBFGS1a <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5, oneSidedGrad = TRUE )
> summary( estResultBFGS1a )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3 iterations
Return code 0: successful convergence 
Log-Likelihood: -49.36404 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  0.793530   0.904117  0.8777 0.38011  
b_1_1  1.883674   0.906682  2.0775 0.03775 *
b_1_2 -1.749220   0.974002 -1.7959 0.07251 .
b_2_0 -0.400356   0.690563 -0.5798 0.56208  
b_2_1  0.915772   0.979979  0.9345 0.35006  
b_2_2 -1.521057   0.720059 -2.1124 0.03465 *
b_3_0  0.977899   0.644966  1.5162 0.12947  
b_3_1 -1.694332   0.947881 -1.7875 0.07386 .
b_3_2  1.576251   0.733988  2.1475 0.03175 *
R_1_2  0.752701   4.327297  0.1739 0.86191  
R_1_3  0.237212   0.905347  0.2620 0.79331  
R_2_3 -0.034528   0.358894 -0.0962 0.92336  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> # estimation with the BFGS algorithm, one-sided gradients, no starting values for beta
> estResultBFGS1b <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    sigma = sigma, data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5, oneSidedGrad = TRUE )
> summary( estResultBFGS1b )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 3 iterations
Return code 0: successful convergence 
Log-Likelihood: -49.57444 
12  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)  
b_1_0  0.81103    0.92973  0.8723 0.38303  
b_1_1  1.90600    0.91602  2.0807 0.03746 *
b_1_2 -1.76267    1.01310 -1.7399 0.08188 .
b_2_0 -0.37696    0.70486 -0.5348 0.59279  
b_2_1  0.94406    1.03448  0.9126 0.36145  
b_2_2 -1.53320    0.75169 -2.0397 0.04138 *
b_3_0  0.93718    0.62914  1.4896 0.13632  
b_3_1 -1.74978    0.99956 -1.7505 0.08002 .
b_3_2  1.60242    0.78477  2.0419 0.04116 *
R_1_2  0.68168    3.40943  0.1999 0.84153  
R_1_3  0.40442    0.80239  0.5040 0.61425  
R_2_3  0.16634    0.33886  0.4909 0.62351  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> # estimation with the BFGS algorithm, one-sided gradients, no starting values for sigma
> estResultBFGS1s <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5, oneSidedGrad = TRUE )
> summary( estResultBFGS1s )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 4 iterations
Return code 0: successful convergence 
Log-Likelihood: -52.78274 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  0.558139   0.866155  0.6444 0.51932  
b_1_1  1.149579   0.906074  1.2687 0.20453  
b_1_2 -1.127465   0.941915 -1.1970 0.23131  
b_2_0 -0.444257   0.855255 -0.5194 0.60345  
b_2_1  1.073250   0.993142  1.0807 0.27985  
b_2_2 -1.572262   0.785571 -2.0014 0.04535 *
b_3_0  0.372552   0.561719  0.6632 0.50718  
b_3_1 -0.854698   0.952140 -0.8977 0.36937  
b_3_2  1.230114   0.715057  1.7203 0.08538 .
R_1_2  0.349810   2.022890  0.1729 0.86271  
R_1_3 -0.011768   0.707759 -0.0166 0.98673  
R_2_3  0.094353   0.339196  0.2782 0.78088  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> # estimation with the BFGS algorithm, Miwa algorithm for obtaining integrals
> estResultBFGSm <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5, algorithm = Miwa( steps = 64 ) )
Warning message:
In log(pmvnormWrap(upper = xBetaTmp, sigma = sigmaTmp, algorithm = algorithm,  :
  NaNs produced
> summary( estResultBFGSm )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 4 iterations
Return code 0: successful convergence 
Log-Likelihood: -52.94417 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  0.536085   0.827019  0.6482 0.51685  
b_1_1  1.161016   0.915110  1.2687 0.20454  
b_1_2 -1.142134   0.938373 -1.2171 0.22355  
b_2_0 -0.449521   0.792153 -0.5675 0.57040  
b_2_1  1.054959   0.883857  1.1936 0.23264  
b_2_2 -1.576244   0.731730 -2.1541 0.03123 *
b_3_0  0.407529   0.488936  0.8335 0.40456  
b_3_1 -0.854000   0.848598 -1.0064 0.31424  
b_3_2  1.259598   0.680236  1.8517 0.06407 .
R_1_2  0.294913   1.857892  0.1587 0.87388  
R_1_3  0.328185   0.709027  0.4629 0.64346  
R_2_3 -0.023863   0.344684 -0.0692 0.94480  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( estResultBFGS, estResultBFGSm )
[1] "Component 1: Mean relative difference: 7.343945e-06"     
[2] "Component 2: Mean relative difference: 2.68304e-05"      
[3] "Component 3: Mean relative difference: 0.0001800706"     
[4] "Component 4: Mean relative difference: 0.0001779414"     
[5] "Component 12: Mean relative difference: 0.000115282"     
[6] "Component 13: target, current do not match when deparsed"
> 
> # estimation with the BFGS algorithm, GHK algorithm for obtaining integrals
> estResultBFGSg <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    tol = 0.5, algorithm = "GHK" )
There were 50 or more warnings (use warnings() to see the first 50)
> summary( estResultBFGSg )
--------------------------------------------
Maximum Likelihood estimation
BFGS maximisation, 4 iterations
Return code 0: successful convergence 
Log-Likelihood: -52.93771 
12  free parameters
Estimates:
       Estimate Std. error t value Pr(> t)  
b_1_0  0.535968   0.827294  0.6479 0.51708  
b_1_1  1.160710   0.914403  1.2694 0.20431  
b_1_2 -1.142391   0.938390 -1.2174 0.22345  
b_2_0 -0.451755   0.806637 -0.5600 0.57545  
b_2_1  1.053128   0.868607  1.2124 0.22535  
b_2_2 -1.575703   0.706958 -2.2288 0.02582 *
b_3_0  0.403853   0.487375  0.8286 0.40731  
b_3_1 -0.857103   0.848213 -1.0105 0.31227  
b_3_2  1.259769   0.678195  1.8575 0.06324 .
R_1_2  0.295300   1.854909  0.1592 0.87351  
R_1_3  0.324945   0.704493  0.4612 0.64462  
R_2_3 -0.020848   0.346164 -0.0602 0.95198  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> all.equal( estResultBFGS, estResultBFGSg )
[1] "Component 1: Mean relative difference: 0.000129477"      
[2] "Component 2: Mean relative difference: 0.00208213"       
[3] "Component 3: Mean relative difference: 0.01734211"       
[4] "Component 4: Mean relative difference: 0.01316397"       
[5] "Component 12: Mean relative difference: 0.00685237"      
[6] "Component 13: target, current do not match when deparsed"
> all.equal( estResultBFGSm, estResultBFGSg )
[1] "Component 1: Mean relative difference: 0.000122134"      
[2] "Component 2: Mean relative difference: 0.002077232"      
[3] "Component 3: Mean relative difference: 0.01738212"       
[4] "Component 4: Mean relative difference: 0.01309901"       
[5] "Component 12: Mean relative difference: 0.006838736"     
[6] "Component 13: target, current do not match when deparsed"
> 
> # estimation with the Nelder-Mead algorithm
> estResultNM <- mvProbit( cbind( y1, y2, y3 ) ~ x1 + x2,
+    coef = c( beta ), sigma = sigma, 
+    data = as.data.frame( cbind( xMat, yMat ) ), 
+    method = "NM", reltol = 0.05 )
> summary( estResultNM )
--------------------------------------------
Maximum Likelihood estimation
Nelder-Mead maximisation, 13 iterations
Return code 0: successful convergence 
Log-Likelihood: -56.94782 
12  free parameters
Estimates:
      Estimate Std. error t value Pr(> t)  
b_1_0  0.80000    1.05415  0.7589 0.44791  
b_1_1  1.20000    0.74598  1.6086 0.10770  
b_1_2 -0.80000    0.91854 -0.8710 0.38378  
b_2_0 -0.44000    0.79679 -0.5522 0.58080  
b_2_1  1.00000    0.87067  1.1485 0.25075  
b_2_2 -1.60000    0.65779 -2.4324 0.01500 *
b_3_0  0.50000    0.51509  0.9707 0.33170  
b_3_1 -0.60000    0.77078 -0.7784 0.43631  
b_3_2  1.20000    0.61086  1.9645 0.04948 *
R_1_2  0.20000    2.41635  0.0828 0.93403  
R_1_3  0.40000    0.73210  0.5464 0.58481  
R_2_3 -0.10000    0.34158 -0.2928 0.76971  
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 
--------------------------------------------
> 
> 
