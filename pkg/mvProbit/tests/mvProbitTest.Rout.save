
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( "mvProbit" )
Loading required package: mvtnorm
Loading required package: maxLik
Loading required package: miscTools
> library( "miscTools" )
> 
> ## generate a simulated data set
> set.seed( 123 )
> # number of observations
> nObs <- 10
> 
> # generate explanatory variables
> xMat <- cbind( 
+    const = rep( 1, nObs ),
+    x1 = as.numeric( rnorm( nObs ) > 0 ),
+    x2 = as.numeric( rnorm( nObs ) > 0 ),
+    x3 = rnorm( nObs ),
+    x4 = rnorm( nObs ) )
> 
> # coefficients
> beta <- cbind( c(  0.8,  1.2, -1.0,  1.4, -0.8 ),
+                c( -0.6,  1.0,  0.6, -1.2, -1.6 ),
+                c(  0.5, -0.6, -0.7,  1.1,  1.2 ) )
> 
> # covariance matrix of error terms
> sigma <- symMatrix( c( 1, 0.2, 0.4, 1, -0.1, 1 ) )
> 
> # generate dependent variables
> yMatLin <- xMat %*% beta 
> yMat <- ( yMatLin + rmvnorm( nObs, sigma = sigma ) ) > 0
> colnames( yMat ) <- paste( "y", 1:3, sep = "" )
> # (yMatLin > 0 )== yMat
> 
> # unconditional expectations of dependent variables
> yExp <- mvProbitExp( ~ x1 + x2 + x3 + x4, coef = c( beta ), 
+    sigma = sigma, data = as.data.frame( xMat ) )
> print( yExp )
           V1         V2         V3
1  0.02086892 0.72542879 0.19411024
2  0.39392340 0.76842941 0.21363900
3  0.12455645 0.78785603 0.19642672
4  0.23485392 0.68069956 0.29183903
5  0.67999333 0.43467562 0.57861599
6  0.02791996 0.97271018 0.03370023
7  0.95816411 0.18630028 0.78414444
8  0.85639266 0.24667543 0.72388317
9  0.06073636 0.96822363 0.03444764
10 0.99787991 0.06734972 0.92257845
> yExp2 <- pnorm( yMatLin )
> all.equal( yExp, as.data.frame( yExp2 ) )
[1] TRUE
> 
> # conditional expectations of dependent variables
> # (assuming that all other dependent variables are one)
> yExpCond <- mvProbitExp( ~ x1 + x2 + x3 + x4, coef = c( beta ), 
+    sigma = sigma, data = as.data.frame( xMat ), cond = TRUE )
> print( yExpCond )
           V1         V2        V3
1  0.07187274 0.83440104 0.5236796
2  0.66021013 0.77861393 0.3141928
3  0.29719904 0.83865340 0.3997068
4  0.44817817 0.72709064 0.4611764
5  0.84689851 0.44240381 0.6175287
6  0.13900849 0.98512770 0.1617006
7  0.99077408 0.17881472 0.7487676
8  0.95051365 0.24378103 0.7103468
9  0.24434314 0.97852743 0.1330968
10 0.99980019 0.06515321 0.8917043
> set.seed( 123 )
> yExpCond2 <- matrix( NA, nrow = nObs, ncol = ncol( yMat ) )
> for( i in 1:nObs ) {
+    for( k in 1:ncol( yMat ) ) {
+       yExpCond2[ i, k ] <- pmvnorm( upper = yMatLin[ i, ], sigma = sigma ) / 
+          pmvnorm( upper = yMatLin[ i, -k ], sigma = sigma[ -k, -k ] )
+    }
+ }
> all.equal( yExpCond, as.data.frame( yExpCond2 ) )
[1] TRUE
> 
> # conditional expectations of dependent variables
> # (assuming that all other dependent variables are as observed)
> yExpCondObs <- mvProbitExp( cbind( y1, y2, y3 ) ~ x1 + x2 + x3 + x4, 
+    coef = c( beta ), sigma = sigma, data = as.data.frame( cbind( xMat, yMat ) ), 
+    cond = TRUE )
> print( yExpCondObs )
           y1         y2         y3
1  0.01446330 0.73513032 0.17239173
2  0.36397851 0.74437836 0.11902643
3  0.10196733 0.78797271 0.15161026
4  0.19746428 0.81300620 0.46117640
5  0.46889017 0.54231448 0.70686035
6  0.02469675 0.97282796 0.02935370
7  0.97143356 0.17881472 0.80939021
8  0.88969595 0.24378103 0.78333814
9  0.05566704 0.96765476 0.02721669
10 0.99862444 0.06515321 0.92560771
> set.seed( 123 )
> yExpCondObs2 <- matrix( NA, nrow = nObs, ncol = ncol( yMat ) )
> for( i in 1:nObs ){
+    for( k in 1:ncol( yMat ) ) {
+       ySign <- 2 * yMat[ i, ] - 1
+       ySign[ k ] <- 1
+       yLinTmp <- yMatLin[ i, ] * ySign
+       sigmaTmp <- diag( ySign ) %*% sigma %*% diag( ySign )
+       yExpCondObs2[ i, k ] <- pmvnorm( upper = yLinTmp, sigma = sigmaTmp ) / 
+          pmvnorm( upper = yLinTmp[ -k ], sigma = sigmaTmp[ -k, -k ] )
+    }
+ }
> all.equal( yExpCondObs, as.data.frame( yExpCondObs2 ) )
[1] "Names: 3 string mismatches"
> 
> # unconditional expectations of dependent variables by simulation
> nSim <- 10000
> ySim <- array( NA, c( nObs, ncol( yMat ), nSim ) )
> for( s in 1:nSim ) {
+    ySim[ , , s ] <- ( yMatLin + rmvnorm( nObs, sigma = sigma ) ) > 0
+ }
> yExpSim <- matrix( NA, nrow = nObs, ncol = ncol( yMat ) )
> for( i in 1:nObs ) {
+    yExpSim[ i, ] <- rowSums( ySim[ i, , ] ) / nSim
+ }
> print( yExpSim )
        [,1]   [,2]   [,3]
 [1,] 0.0192 0.7291 0.1973
 [2,] 0.4002 0.7599 0.2150
 [3,] 0.1184 0.7868 0.1980
 [4,] 0.2376 0.6843 0.2992
 [5,] 0.6817 0.4372 0.5780
 [6,] 0.0275 0.9709 0.0357
 [7,] 0.9580 0.1844 0.7874
 [8,] 0.8550 0.2552 0.7153
 [9,] 0.0624 0.9697 0.0333
[10,] 0.9984 0.0637 0.9230
> print( yExpSim - as.matrix( yExp ) )
                 V1           V2            V3
 [1,] -0.0016689243  0.003671207  0.0031897559
 [2,]  0.0062765951 -0.008529406  0.0013610027
 [3,] -0.0061564475 -0.001056035  0.0015732843
 [4,]  0.0027460841  0.003600442  0.0073609724
 [5,]  0.0017066657  0.002524382 -0.0006159879
 [6,] -0.0004199629 -0.001810177  0.0019997717
 [7,] -0.0001641098 -0.001900281  0.0032555602
 [8,] -0.0013926616  0.008524570 -0.0085831712
 [9,]  0.0016636425  0.001476372 -0.0011476431
[10,]  0.0005200914 -0.003649723  0.0004215455
> 
> # for testing state of random number generator
> rnorm( 4 )
[1]  1.1641646  2.5887586  0.1506331 -0.7714334
> 
> # calculating log likelihood value(s)
> logLikVal <- mvProbitLogLik( cbind( y1, y2, y3 ) ~ x1 + x2 + x3 + x4, 
+    coef = c( beta ), sigma = sigma, data = as.data.frame( cbind( xMat, yMat ) ) )
> print( logLikVal )
 [1] -0.53540368 -0.94148045 -0.55154921 -2.32725660 -2.25846841 -0.08636705
 [7] -0.46565779 -0.70380817 -0.12409393 -0.14925590
> 
> # calculating log likelihood value(s) with one-sided gradients
> logLikValGrad <- mvProbitLogLik( cbind( y1, y2, y3 ) ~ x1 + x2 + x3 + x4, 
+    coef = c( beta ), sigma = sigma, data = as.data.frame( cbind( xMat, yMat ) ),
+    oneSidedGrad = TRUE )
> print( logLikValGrad )
 [1] -0.53540368 -0.94148045 -0.55154921 -2.32725660 -2.25846841 -0.08636705
 [7] -0.46565779 -0.70380817 -0.12409393 -0.14925590
attr(,"gradient")
              [,1]        [,2]        [,3]         [,4]        [,5]        [,6]
 [1,] -0.039483841  0.00000000 -0.03948384  0.042161678 -0.01683843  0.44704993
 [2,] -0.620183350  0.00000000 -0.62018335  0.135184332  0.18299830  0.43838109
 [3,] -0.208857053 -0.20885705 -0.20885705  0.214287930 -0.18695329  0.37077262
 [4,]  1.493872405  1.49387241  1.49387241 -1.088871056  1.31181943  0.33994221
 [5,]  0.916943097  0.91694310  0.00000000 -0.573125833  0.75334316 -0.88638343
 [6,] -0.060814325 -0.06081432 -0.06081432  0.102574830 -0.04187918  0.06468123
 [7,]  0.071168228  0.07116823  0.07116823  0.059623830  0.03942136 -0.31972048
 [8,]  0.224731687  0.00000000  0.00000000  0.034467822 -0.01391353 -0.41843724
 [9,] -0.121583019  0.00000000 -0.12158302  0.138377867  0.03719982  0.07522178
[10,]  0.004713358  0.00000000  0.00000000  0.005909676 -0.00179330 -0.13610317
             [,7]        [,8]        [,9]       [,10]       [,11]       [,12]
 [1,]  0.00000000  0.44704993 -0.47737105  0.19065086 -0.31393241  0.00000000
 [2,]  0.00000000  0.43838109 -0.09555614 -0.12935385 -0.24067217  0.00000000
 [3,]  0.37077262  0.37077262 -0.38041481  0.33188811 -0.28830160 -0.28830160
 [4,]  0.33994221  0.33994221 -0.24778116  0.29851466 -0.79090123 -0.79090123
 [5,] -0.88638343  0.00000000  0.55402410 -0.72823581 -1.24495606 -1.24495606
 [6,]  0.06468123  0.06468123 -0.10909769  0.04454211 -0.07041861 -0.07041861
 [7,] -0.31972048 -0.31972048 -0.26785765 -0.17709877  0.34376678  0.34376678
 [8,]  0.00000000  0.00000000 -0.06417699  0.02590615  0.39133019  0.00000000
 [9,]  0.00000000  0.07522178 -0.08561287 -0.02301509 -0.06674817  0.00000000
[10,]  0.00000000  0.00000000 -0.17064822  0.05178325  0.15271676  0.00000000
            [,13]      [,14]       [,15]         [,16]        [,17]
 [1,] -0.31393241 0.33522403 -0.13388089 -8.952220e-03  0.031648334
 [2,] -0.24067217 0.05246045  0.07101543 -2.104201e-01  0.242644210
 [3,] -0.28830160 0.29579832 -0.25806614 -4.883473e-02  0.118710383
 [4,] -0.79090123 0.57648052 -0.69451681  5.931622e-01 -0.947530312
 [5,]  0.00000000 0.77814600 -1.02283229 -6.938759e-01 -0.900552153
 [6,] -0.07041861 0.11877428 -0.04849307 -1.395392e-03  0.015236738
 [7,]  0.34376678 0.28800338  0.19041854 -1.166853e-02  0.055165820
 [8,]  0.00000000 0.06001956 -0.02422794 -6.156838e-02  0.159492545
 [9,] -0.06674817 0.07596839  0.02042242 -4.694616e-03  0.024209943
[10,]  0.00000000 0.19147851 -0.05810436  1.898620e-06  0.003182991
             [,18]
 [1,] -0.161540001
 [2,] -0.132691041
 [3,] -0.129625340
 [4,] -0.319367779
 [5,]  1.015152327
 [6,] -0.006831114
 [7,] -0.129387806
 [8,] -0.192492744
 [9,] -0.007141280
[10,] -0.026750044
> 
> # calculating log likelihood value(s) with two-sided gradients
> llTmp <- function( coef ) {
+    betaTmp <- coef[ 1:15 ]
+    sigmaTmp <- diag( 3 )
+    sigmaTmp[ upper.tri( sigmaTmp ) ] <- coef[ -(1:15) ]
+    sigmaTmp[ lower.tri( sigmaTmp ) ] <- t( sigmaTmp )[ lower.tri( sigmaTmp ) ]
+    result <- mvProbitLogLik( cbind( y1, y2, y3 ) ~ x1 + x2 + x3 + x4, 
+       coef = betaTmp, sigma = sigmaTmp, 
+       data = as.data.frame( cbind( xMat, yMat ) ) )
+    return( result )
+ }
> allCoef <- c( c( beta ), sigma[ upper.tri( sigma ) ] )
> logLikValGrad2 <- numericGradient( llTmp, allCoef )
> print( logLikValGrad2 )
              [,1]        [,2]        [,3]         [,4]         [,5]
 [1,] -0.039483794  0.00000000 -0.03948379  0.042161731 -0.016838426
 [2,] -0.620183046  0.00000000 -0.62018305  0.135184347  0.182998331
 [3,] -0.208856891 -0.20885689 -0.20885689  0.214288100 -0.186953163
 [4,]  1.493872851  1.49387285  1.49387285 -1.088870819  1.311819776
 [5,]  0.916943482  0.91694348  0.00000000 -0.573125682  0.753343417
 [6,] -0.060814262 -0.06081426 -0.06081426  0.102575009 -0.041879149
 [7,]  0.071168302  0.07116830  0.07116830  0.059623882  0.039421379
 [8,]  0.224731858  0.00000000  0.00000000  0.034467826 -0.013913534
 [9,] -0.121582913  0.00000000 -0.12158291  0.138378004  0.037199832
[10,]  0.004713365  0.00000000  0.00000000  0.005909688 -0.001793299
             [,6]        [,7]        [,8]        [,9]       [,10]       [,11]
 [1,]  0.44705018  0.00000000  0.44705018 -0.47737078  0.19065091 -0.31393221
 [2,]  0.43838133  0.00000000  0.43838133 -0.09555613 -0.12935383 -0.24067199
 [3,]  0.37077284  0.37077284  0.37077284 -0.38041458  0.33188828 -0.28830140
 [4,]  0.33994242  0.33994242  0.33994242 -0.24778105  0.29851482 -0.79090087
 [5,] -0.88638309 -0.88638309  0.00000000  0.55402424 -0.72823558 -1.24495564
 [6,]  0.06468129  0.06468129  0.06468129 -0.10909751  0.04454214 -0.07041854
 [7,] -0.31972028 -0.31972028 -0.31972028 -0.26785751 -0.17709871  0.34376699
 [8,] -0.41843700  0.00000000  0.00000000 -0.06417699  0.02590615  0.39133042
 [9,]  0.07522185  0.00000000  0.07522185 -0.08561277 -0.02301508 -0.06674810
[10,] -0.13610305  0.00000000  0.00000000 -0.17064804  0.05178326  0.15271688
            [,12]       [,13]      [,14]       [,15]         [,16]        [,17]
 [1,]  0.00000000 -0.31393221 0.33522426 -0.13388086 -8.952234e-03  0.031648323
 [2,]  0.00000000 -0.24067199 0.05246046  0.07101544 -2.104201e-01  0.242644199
 [3,] -0.28830140 -0.28830140 0.29579852 -0.25806598 -4.883477e-02  0.118710332
 [4,] -0.79090087 -0.79090087 0.57648071 -0.69451654  5.931625e-01 -0.947529541
 [5,] -1.24495564  0.00000000 0.77814616 -1.02283200 -6.938756e-01 -0.900551496
 [6,] -0.07041854 -0.07041854 0.11877447 -0.04849304 -1.395396e-03  0.015236720
 [7,]  0.34376699  0.34376699 0.28800353  0.19041861 -1.166855e-02  0.055165801
 [8,]  0.00000000  0.00000000 0.06001957 -0.02422794 -6.156843e-02  0.159492498
 [9,]  0.00000000 -0.06674810 0.07596848  0.02042243 -4.694623e-03  0.024209921
[10,]  0.00000000  0.00000000 0.19147871 -0.05810435  1.897843e-06  0.003182989
             [,18]
 [1,] -0.161540032
 [2,] -0.132691077
 [3,] -0.129625379
 [4,] -0.319367748
 [5,]  1.015152929
 [6,] -0.006831124
 [7,] -0.129387844
 [8,] -0.192492775
 [9,] -0.007141292
[10,] -0.026750069
> attr( logLikValGrad, "gradient" ) / logLikValGrad2 - 1
               [,1]          [,2]          [,3]          [,4]          [,5]
 [1,]  1.169727e-06           NaN  1.169727e-06 -1.248160e-06  5.010976e-07
 [2,]  4.892490e-07           NaN  4.888910e-07 -1.092284e-07 -1.449977e-07
 [3,]  7.718413e-07  7.718413e-07  7.718413e-07 -7.916542e-07  6.906486e-07
 [4,] -2.984629e-07 -2.984629e-07 -2.984629e-07  2.169729e-07 -2.616830e-07
 [5,] -4.203852e-07 -4.203852e-07           NaN  2.626758e-07 -3.448523e-07
 [6,]  1.035570e-06  1.035570e-06  1.035570e-06 -1.741099e-06  7.091468e-07
 [7,] -1.036618e-06 -1.036618e-06 -1.036618e-06 -8.695746e-07 -5.759327e-07
 [8,] -7.588166e-07           NaN           NaN -1.127365e-07  4.787668e-08
 [9,]  8.734190e-07           NaN  8.734190e-07 -9.946660e-07 -2.652460e-07
[10,] -1.613503e-06           NaN           NaN -1.986672e-06  6.964823e-07
               [,6]          [,7]          [,8]          [,9]         [,10]
 [1,] -5.396519e-07           NaN -5.396519e-07  5.758443e-07 -2.294392e-07
 [2,] -5.523493e-07           NaN -5.523493e-07  1.173473e-07  1.613574e-07
 [3,] -5.892878e-07 -5.904855e-07 -5.892878e-07  6.049958e-07 -5.285370e-07
 [4,] -6.257493e-07 -6.257493e-07 -6.257493e-07  4.570275e-07 -5.504350e-07
 [5,]  3.892869e-07  3.887859e-07           NaN -2.428757e-07  3.201530e-07
 [6,] -9.923235e-07 -9.923235e-07 -9.923235e-07  1.677712e-06 -6.770315e-07
 [7,]  6.245260e-07  6.234842e-07  6.245260e-07  5.216265e-07  3.444788e-07
 [8,]  5.603689e-07           NaN           NaN  8.303709e-08 -4.285558e-08
 [9,] -9.682110e-07           NaN -9.682110e-07  1.099845e-06  3.014934e-07
[10,]  8.283661e-07           NaN           NaN  1.035580e-06 -3.242770e-07
              [,11]         [,12]         [,13]         [,14]         [,15]
 [1,]  6.348028e-07           NaN  6.348028e-07 -6.779421e-07  2.695101e-07
 [2,]  7.459242e-07           NaN  7.459242e-07 -1.587228e-07 -2.157429e-07
 [3,]  6.762200e-07  6.762200e-07  6.762200e-07 -6.932360e-07  6.044436e-07
 [4,]  4.508828e-07  4.508828e-07  4.508828e-07 -3.289374e-07  3.951628e-07
 [5,]  3.381619e-07  3.381619e-07           NaN -2.117303e-07  2.774385e-07
 [6,]  9.962181e-07  9.962181e-07  9.962181e-07 -1.678662e-06  6.856897e-07
 [7,] -6.158809e-07 -6.158809e-07 -6.158809e-07 -5.173267e-07 -3.413719e-07
 [8,] -5.994682e-07           NaN           NaN -9.063866e-08  3.207686e-08
 [9,]  1.023971e-06           NaN  1.023971e-06 -1.164756e-06 -2.996757e-07
[10,] -8.022238e-07           NaN           NaN -1.004530e-06  3.038077e-07
              [,16]        [,17]         [,18]
 [1,] -1.550204e-06 3.543080e-07 -1.876259e-07
 [2,] -6.753563e-08 4.621274e-08 -2.710900e-07
 [3,] -8.639023e-07 4.227272e-07 -3.014830e-07
 [4,] -6.288916e-07 8.145678e-07  9.733683e-08
 [5,]  4.780895e-07 7.293397e-07 -5.936338e-07
 [6,] -3.122859e-06 1.128496e-06 -1.537885e-06
 [7,] -1.631765e-06 3.481660e-07 -2.934559e-07
 [8,] -7.501455e-07 2.916648e-07 -1.626466e-07
 [9,] -1.658373e-06 9.068456e-07 -1.616839e-06
[10,]  4.094944e-04 6.539979e-07 -9.359052e-07
> range( attr( logLikValGrad, "gradient" ) / logLikValGrad2 - 1, na.rm = TRUE )
[1] -3.122859e-06  4.094944e-04
> attr( logLikValGrad, "gradient" ) - logLikValGrad2
               [,1]          [,2]          [,3]          [,4]          [,5]
 [1,] -4.618528e-08  0.000000e+00 -4.618528e-08 -5.262457e-08 -8.437695e-09
 [2,] -3.034240e-07  0.000000e+00 -3.032019e-07 -1.476597e-08 -2.653433e-08
 [3,] -1.612044e-07 -1.612044e-07 -1.612044e-07 -1.696421e-07 -1.291189e-07
 [4,] -4.458656e-07 -4.458656e-07 -4.458656e-07 -2.362555e-07 -3.432810e-07
 [5,] -3.854694e-07 -3.854694e-07  0.000000e+00 -1.505462e-07 -2.597922e-07
 [6,] -6.297740e-08 -6.297740e-08 -6.297740e-08 -1.785933e-07 -2.969847e-08
 [7,] -7.377432e-08 -7.377432e-08 -7.377432e-08 -5.184742e-08 -2.270406e-08
 [8,] -1.705303e-07  0.000000e+00  0.000000e+00 -3.885781e-09 -6.661338e-10
 [9,] -1.061928e-07  0.000000e+00 -1.061928e-07 -1.376399e-07 -9.867107e-09
[10,] -7.605028e-09  0.000000e+00  0.000000e+00 -1.174061e-08 -1.249001e-09
               [,6]          [,7]          [,8]          [,9]         [,10]
 [1,] -2.412515e-07  0.000000e+00 -2.412515e-07 -2.748912e-07 -4.374279e-08
 [2,] -2.421396e-07  0.000000e+00 -2.421396e-07 -1.121325e-08 -2.087219e-08
 [3,] -2.184919e-07 -2.189360e-07 -2.184919e-07 -2.301492e-07 -1.754152e-07
 [4,] -2.127187e-07 -2.127187e-07 -2.127187e-07 -1.132427e-07 -1.643130e-07
 [5,] -3.450573e-07 -3.446132e-07  0.000000e+00 -1.345590e-07 -2.331468e-07
 [6,] -6.418477e-08 -6.418477e-08 -6.418477e-08 -1.830341e-07 -3.015643e-08
 [7,] -1.996736e-07 -1.993405e-07 -1.996736e-07 -1.397216e-07 -6.100676e-08
 [8,] -2.344791e-07  0.000000e+00  0.000000e+00 -5.329071e-09 -1.110223e-09
 [9,] -7.283063e-08  0.000000e+00 -7.283063e-08 -9.416079e-08 -6.938894e-09
[10,] -1.127431e-07  0.000000e+00  0.000000e+00 -1.767197e-07 -1.679212e-08
              [,11]         [,12]         [,13]         [,14]         [,15]
 [1,] -1.992850e-07  0.000000e+00 -1.992850e-07 -2.272627e-07 -3.608225e-08
 [2,] -1.795231e-07  0.000000e+00 -1.795231e-07 -8.326673e-09 -1.532108e-08
 [3,] -1.949552e-07 -1.949552e-07 -1.949552e-07 -2.050582e-07 -1.559863e-07
 [4,] -3.566036e-07 -3.566036e-07 -3.566036e-07 -1.896261e-07 -2.744471e-07
 [5,] -4.209966e-07 -4.209966e-07  0.000000e+00 -1.647571e-07 -2.837730e-07
 [6,] -7.015222e-08 -7.015222e-08 -7.015222e-08 -1.993822e-07 -3.325118e-08
 [7,] -2.117195e-07 -2.117195e-07 -2.117195e-07 -1.489919e-07 -6.500356e-08
 [8,] -2.345901e-07  0.000000e+00  0.000000e+00 -5.440093e-09 -7.771561e-10
 [9,] -6.834810e-08  0.000000e+00 -6.834810e-08 -8.848478e-08 -6.120104e-09
[10,] -1.225131e-07  0.000000e+00  0.000000e+00 -1.923461e-07 -1.765255e-08
              [,16]         [,17]         [,18]
 [1,]  1.387779e-08  1.121325e-08  3.030909e-08
 [2,]  1.421085e-08  1.121325e-08  3.597123e-08
 [3,]  4.218847e-08  5.018208e-08  3.907985e-08
 [4,] -3.730349e-07 -7.718270e-07 -3.108624e-08
 [5,] -3.317346e-07 -6.568079e-07 -6.026291e-07
 [6,]  4.357625e-09  1.719458e-08  1.050549e-08
 [7,]  1.904032e-08  1.920686e-08  3.796963e-08
 [8,]  4.618528e-08  4.651834e-08  3.130829e-08
 [9,]  7.785439e-09  2.195466e-08  1.154632e-08
[10,]  7.771561e-10  2.081668e-09  2.503553e-08
> range( attr( logLikValGrad, "gradient" ) - logLikValGrad2 )
[1] -7.718270e-07  5.018208e-08
> 
> # for testing state of random number generator
> rnorm( 4 )
[1] -0.08360093  0.27982411  0.69434253  0.66820416
> 
> # calculating marginal effects, unconditional
> margEffUnc <- mvProbitMargEff( ~ x1 + x2 + x3 + x4, coef = c( beta ), 
+    sigma = sigma, data = as.data.frame( xMat ) )
> print( margEffUnc )
     d_y1_d_x1  d_y2_d_x1   d_y3_d_x1   d_y1_d_x2  d_y2_d_x2   d_y3_d_x2
1  0.180673491 0.21966598 -0.12235589 -0.12920309 0.22580951 -0.24120841
2  0.430121958 0.19008353 -0.13195878 -0.37365413 0.21525553 -0.24897191
3  0.115232772 0.36750507 -0.20314566 -0.31483718 0.20898573 -0.24219913
4  0.207611034 0.38276287 -0.22888859 -0.37427350 0.23255246 -0.26855955
5  0.448006648 0.31256137 -0.20905150 -0.38274109 0.23373092 -0.27065767
6  0.026991730 0.15092034 -0.07583674 -0.15288996 0.06575970 -0.09574988
7  0.256300597 0.15702898 -0.13302286 -0.03866694 0.11839993 -0.14725130
8  0.131828020 0.37694792 -0.22611070 -0.33077755 0.21945964 -0.26592681
9  0.302950354 0.02962659 -0.02666829 -0.23089623 0.07290773 -0.09709985
10 0.002095525 0.24265946 -0.12793733 -0.02934265 0.11782358 -0.15753170
     d_y1_d_x3   d_y2_d_x3  d_y3_d_x3    d_y1_d_x4  d_y2_d_x4  d_y3_d_x4
1  0.070272979 -0.40009837 0.30243692 -0.040155988 -0.5334645 0.32993118
2  0.538657270 -0.36576535 0.32022425 -0.307804155 -0.4876871 0.34933554
3  0.287479936 -0.34790671 0.30462485 -0.164274249 -0.4638756 0.33231802
4  0.430074036 -0.42873970 0.37764850 -0.245756592 -0.5716529 0.41198018
5  0.500659694 -0.47229842 0.43028800 -0.286091254 -0.6297312 0.46940509
6  0.089736371 -0.07546714 0.08239434 -0.051277926 -0.1006229 0.08988474
7  0.125115932 -0.32171038 0.32215058 -0.071494819 -0.4289472 0.35143700
8  0.317022613 -0.37862010 0.36777139 -0.181155779 -0.5048268 0.40120515
9  0.168371792 -0.08563215 0.08389399 -0.096212453 -0.1141762 0.09152071
10 0.009358606 -0.15639629 0.15952285 -0.005347775 -0.2085284 0.17402492
> 
> # for testing state of random number generator
> rnorm( 4 )
[1] -0.89164314 -1.20772927  0.08188799 -1.63744615
> 
> # calculating marginal effects, conditional
> # (assuming that all other dependent variables are one)
> margEffCond <- mvProbitMargEff( ~ x1 + x2 + x3 + x4, coef = c( beta ), 
+    sigma = sigma, data = as.data.frame( xMat ), cond = TRUE )
> print( margEffCond )
      d_y1_d_x1  d_y2_d_x1  d_y3_d_x1    d_y1_d_x2  d_y2_d_x2  d_y3_d_x2
1  0.4118196285 0.11739526 -0.3604025 -0.229336023 0.24593722 -0.1258539
2  0.3072225103 0.16487989 -0.2207700 -0.251000562 0.23611642 -0.1732677
3  0.2669112375 0.22759787 -0.3835856 -0.358259662 0.23041241 -0.1477800
4  0.3739043795 0.27567568 -0.3557057 -0.346950945 0.26371706 -0.1557841
5  0.4394382768 0.27074559 -0.2617188 -0.320735105 0.26324994 -0.1627496
6  0.1333435905 0.05073414 -0.3842322 -0.271533511 0.05978174 -0.1100301
7  0.1186071830 0.14525466 -0.1603061 -0.008858586 0.11287101 -0.1545519
8  0.0480023435 0.35031208 -0.2339206 -0.203312770 0.23956141 -0.1771396
9  0.5485878232 0.01831792 -0.1162003 -0.323170336 0.07416330 -0.1034620
10 0.0002006688 0.23198796 -0.1301177 -0.005713955 0.11100106 -0.1661770
     d_y1_d_x3   d_y2_d_x3 d_y3_d_x3     d_y1_d_x4   d_y2_d_x4 d_y3_d_x4
1  0.176511553 -0.35161365 0.2230278 -0.1468374650 -0.32840063 0.6037852
2  0.469998943 -0.39066600 0.2417570 -0.4008840083 -0.40484261 0.4967979
3  0.440775657 -0.33688760 0.2350791 -0.3804375291 -0.32473440 0.5721677
4  0.520096372 -0.45149738 0.2437236 -0.4140595278 -0.44855492 0.5674104
5  0.329759784 -0.50502699 0.2793276 -0.2238793697 -0.56756344 0.4882276
6  0.253519125 -0.05252244 0.1581411 -0.2782039234 -0.04844860 0.3860354
7  0.036044561 -0.30983835 0.2977489 -0.0217098991 -0.39935646 0.3575083
8  0.147282674 -0.38616286 0.2841424 -0.0911414585 -0.46690820 0.4071330
9  0.361294622 -0.07109233 0.1415322 -0.3929326391 -0.06625942 0.3344233
10 0.001139143 -0.14919554 0.1853582 -0.0006184313 -0.19921227 0.1994600
> 
> # for testing state of random number generator
> rnorm( 4 )
[1] -1.0277916  1.4922674  0.2076360 -0.7877725
> 
> # calculating marginal effects, conditional
> # (assuming that all other dependent variables are as observed)
> margEffCondObs <- mvProbitMargEff( cbind( y1, y2, y3 ) ~ x1 + x2 + x3 + x4, 
+    coef = c( beta ), sigma = sigma, data = as.data.frame( cbind( xMat, yMat ) ), 
+    cond = TRUE )
> print( margEffCondObs )
     d_y1_d_x1  d_y2_d_x1   d_y3_d_x1   d_y1_d_x2  d_y2_d_x2   d_y3_d_x2
1  0.171996342 0.20548450 -0.12683630 -0.09565856 0.22334223 -0.17477969
2  0.453191797 0.18524031 -0.10373362 -0.37096387 0.26641909 -0.08535409
3  0.097170952 0.34334978 -0.20596769 -0.27711458 0.23004848 -0.12842330
4  0.182410203 0.22269238 -0.35570571 -0.34891067 0.24660260 -0.15578410
5  0.395986197 0.26524349 -0.22396225 -0.32296070 0.25154101 -0.13453652
6  0.024154291 0.14529870 -0.07341807 -0.13290249 0.06995384 -0.06173759
7  0.247589767 0.14525466 -0.14349687 -0.02633077 0.11287101 -0.12514676
8  0.105029478 0.35031208 -0.23804307 -0.28326585 0.23956141 -0.14817578
9  0.305110169 0.02953097 -0.02469022 -0.21063370 0.08274688 -0.05170353
10 0.001367517 0.23198796 -0.11609002 -0.01846468 0.11100106 -0.13778875
     d_y1_d_x3   d_y2_d_x3  d_y3_d_x3    d_y1_d_x4   d_y2_d_x4  d_y3_d_x4
1  0.049373080 -0.38500169 0.24421287 -0.035714957 -0.50418036 0.30196103
2  0.517147895 -0.42554047 0.13202976 -0.342171325 -0.46832085 0.27412185
3  0.240558244 -0.35787663 0.19265229 -0.169602306 -0.43545648 0.30290876
4  0.379013096 -0.37364986 0.24372359 -0.263823130 -0.35604888 0.56741041
5  0.539218719 -0.52354724 0.23207467 -0.395240811 -0.53897413 0.45555058
6  0.077901270 -0.07579759 0.06504208 -0.052734719 -0.09840353 0.08501094
7  0.086007861 -0.30983835 0.25306704 -0.065533041 -0.39935646 0.33275649
8  0.252305734 -0.38616286 0.23663073 -0.184942054 -0.46690820 0.37910173
9  0.152439840 -0.08917123 0.05745048 -0.100420041 -0.11276497 0.08248587
10 0.005889161 -0.14919554 0.14820194 -0.004512567 -0.19921227 0.16554327
> 
> # for testing state of random number generator
> rnorm( 4 )
[1] -0.6406545  0.9398736 -0.4957825 -1.2047679
> 
> 
