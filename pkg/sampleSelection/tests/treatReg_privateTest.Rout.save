
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### Testing treatreg.
> ### These are testst that are not supposed to be included in CRAN
> 
> DGP <- function(N=1000, sigma=1, rho=0.8,
+                 alpha0=-1, alpha1=1, alpha2=1,
+                 beta0=0, beta1=1, beta2=1) {
+    ## Generate random data
+    library(mvtnorm)
+    Sigma <- matrix(c(1, rho*sigma, rho*sigma, sigma^2), 2, 2)
+    uv <- rmvnorm(N, mean=c(0,0), sigma=Sigma)
+    u <- uv[,1]
+    v <- uv[,2]
+    x <- rnorm(N)
+    z <- rnorm(N)
+    ySX <- alpha0 + alpha1*x + alpha2*z + u
+    yS <- ySX > 0
+    yO <- beta0 + beta1*x + beta2*yS + v
+    data.frame(yO, yS, x, z, ySX, u, v)
+ }
> 
> library(sampleSelection)
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
> set.seed(1)
> options(digits=4)
> cat("NA, Inf in data.  Should show 93 observations\n")
NA, Inf in data.  Should show 93 observations
> dat <- DGP(100)
> dat$yO[1] <- NA
> dat$yO[2] <- Inf
> dat$yS[3] <- NA
> dat$x[5] <- NA
> dat$x[6] <- Inf
> dat$z[7] <- NA
> dat$z[8] <- Inf
> m <- treatReg(yS~x+z, yO~yS+x, data=dat)
> print(summary(m))
--------------------------------------------
Tobit treatment model (switching regression model)
Maximum Likelihood estimation
Newton-Raphson maximisation, 4 iterations
Return code 1: gradient close to zero
Log-Likelihood: -149.3 
93 observations: 70 non-participants (selection FALSE) and 23 participants (selection TRUE)

8 free parameters (df = 85)
Probit selection equation:
            Estimate Std. error t value Pr(> t)    
(Intercept)   -1.083      0.193   -5.61   2e-08 ***
x              0.656      0.196    3.35   8e-04 ***
z              0.950      0.206    4.61   4e-06 ***
Outcome equation:
            Estimate Std. error t value Pr(> t)    
(Intercept)   0.0672     0.1286    0.52  0.6015    
ySTRUE        0.8850     0.3324    2.66  0.0077 ** 
x             1.0095     0.1103    9.15  <2e-16 ***
   Error terms:
      Estimate Std. error t value Pr(> t)    
sigma   0.9455     0.0888   10.65 < 2e-16 ***
rho     0.7763     0.1388    5.59 2.2e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
--------------------------------------------
> 
> mf <- model.frame(m)
> print(mf[sample(nrow(mf), 10),])
      yS        x        z      yO
87 FALSE -0.66818 -2.12936 -0.5328
6   TRUE      Inf  1.51221  4.5224
96 FALSE  0.13445 -0.92431  0.4148
74  TRUE  2.64917 -0.06884  4.5981
29 FALSE  0.19719 -0.86404 -0.9009
66 FALSE  0.27005  0.61222 -0.2298
35 FALSE -0.05972 -0.33428  1.9521
89 FALSE  0.43370 -1.90496  2.6421
34 FALSE  0.57051  1.36443  1.0741
4  FALSE -0.33091 -0.38363  0.5475
> mm <- model.matrix(m)
> print(mm[sample(nrow(mm), 10),])
   (Intercept) ySTRUE       x
38           1      0 -1.1865
41           1      0  0.7073
37           1      1  0.5608
94           1      0 -1.4263
39           1      0  1.0968
54           1      0 -0.2477
88           1      0  0.9452
86           1      1 -1.0011
25           1      0 -1.1566
67           1      0 -0.4222
> mm <- model.matrix(m, part="selection")
> print(mm[sample(nrow(mm), 10),])
    (Intercept)       x        z
37            1  0.5608  0.94659
57            1 -2.4031 -1.17358
74            1  2.6492 -0.06884
81            1  0.3981  0.76259
84            1 -0.7012  0.16434
6             1     Inf  1.51221
24            1 -0.3410 -1.86979
100           1 -0.3058  0.86522
31            1 -0.9858 -0.32710
68            1 -1.1891  0.56795
> 
> ## Now test prediction
> cat("predicted and actual selection values\n")
predicted and actual selection values
> pl <- predict(m, part="selection", type="link")
> pr <- predict(m, part="selection", type="response")
> p <- cbind(pred.link=pl, pred.resp=pr, actual.resp=mf$yS)
> print(p[sample(nrow(p), 10),])
   pred.link pred.resp actual.resp
71  -1.62195 5.241e-02           0
91  -0.08054 4.679e-01           0
84  -1.38642 8.281e-02           0
77  -2.46122 6.923e-03           0
41   0.08367 5.333e-01           0
57  -3.77351 8.048e-05           0
10  -0.44146 3.294e-01           1
82  -0.29394 3.844e-01           1
89  -2.60855 4.546e-03           0
48  -1.43220 7.604e-02           1
> cat("predicted and actual outcomes\n")
predicted and actual outcomes
> pu <- predict(m, part="outcome", type="unconditional")
> pc <- predict(m, part="outcome", type="conditional")
> p <- cbind("E[yo]"=pu, pc, "yo"=mf$yO, "ys"=mf$yS)
> print(p[sample(nrow(p), 10),])
     E[yo] E[yo|ys=0] E[yo|ys=1]      yo ys
93  1.1987     0.5585     1.7318  1.3352  1
16  2.4863     1.4082     2.7171  3.0354  1
26  2.7724     1.9172     3.1339  2.4338  1
50  1.9823     0.6340     2.1057  1.0494  1
48  0.6941     0.5805     2.0748  1.9535  1
44 -0.8199    -0.8662     0.8792 -0.6753  0
6      Inf        NaN        Inf  4.5224  1
61  1.0272     1.0231     3.3841  1.9260  0
67 -0.3590    -0.6563     0.5966 -1.5426  0
34  0.6431    -0.2420     0.9845  1.0741  0
> 
> 
> proc.time()
   user  system elapsed 
  3.190   0.071   3.257 
